/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:22:31 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.loa.enums.LoaErrorMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaErrorMessage_ESTest extends LoaErrorMessage_ESTest_scaffolding {

    /**
     * Test that the enum values are correctly defined and counted.
     */
    @Test(timeout = 4000)
    public void testValues_Count_ShouldReturnCorrectEnumCount() throws Throwable {
        LoaErrorMessage[] loaErrorMessages = LoaErrorMessage.values();
        assertEquals(18, loaErrorMessages.length);
    }

    /**
     * Test that the enum valueOf method returns the correct enum constant.
     */
    @Test(timeout = 4000)
    public void testValueOf_WithValidEnumName_ShouldReturnCorrectEnum() throws Throwable {
        LoaErrorMessage loaErrorMessage = LoaErrorMessage.valueOf("INSTALLMENT_AMOUNT_MUST_BE_POSITIVE");
        assertEquals(LoaErrorMessage.INSTALLMENT_AMOUNT_MUST_BE_POSITIVE, loaErrorMessage);
    }

    /**
     * Test that setting a detail message does not affect the main message.
     */
    @Test(timeout = 4000)
    public void testSetDetailMessage_WithEmptyString_ShouldNotChangeMainMessage() throws Throwable {
        LoaErrorMessage loaErrorMessage = LoaErrorMessage.PRINCIPAL_lOAN_AMOUNT_MUST_BE_POSITIVE;
        loaErrorMessage.setDetailMessage("");
        assertEquals("Principal loan amount must be positive", loaErrorMessage.getMessage());
    }

    /**
     * Test that the getDetailMessage method returns the correct detail message.
     */
    @Test(timeout = 4000)
    public void testGetDetailMessage_ShouldReturnCorrectDetailMessage() throws Throwable {
        LoaErrorMessage loaErrorMessage = LoaErrorMessage.DUE_DATE_HAS_NOT_PASSED_YET;
        String detailMessage = loaErrorMessage.getDetailMessage();
        assertEquals("There is still time for the due date :", detailMessage);
    }

    /**
     * Test that the getMessage method returns the correct message.
     */
    @Test(timeout = 4000)
    public void testGetMessage_ShouldReturnCorrectMessage() throws Throwable {
        LoaErrorMessage loaErrorMessage = LoaErrorMessage.PRINCIPAL_lOAN_AMOUNT_MUST_BE_POSITIVE;
        String message = loaErrorMessage.getMessage();
        assertEquals("Principal loan amount must be positive", message);
    }
}