/*
 * This file was automatically generated by EvoSuite
 * Sat Jun21 21:22:52 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cbarkinozer.onlinebankingrestapi.app.cus.service.entityservice.CusCustomerEntityService;
import com.cbarkinozer.onlinebankingrestapi.app.loa.dto.LoaApplyLoanDto;
import com.cbarkinozer.onlinebankingrestapi.app.loa.dto.LoaCalculateLoanResponseDto;
import com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService;
import com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanValidationService;
import com.cbarkinozer.onlinebankingrestapi.app.loa.service.entityservice.LoaLoanEntityService;
import com.cbarkinozer.onlinebankingrestapi.app.loa.service.entityservice.LoaLoanPaymentEntityService;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaLoanService_ESTest extends LoaLoanService_ESTest_scaffolding {

    /**
     * Test calculateLoan method with valid installment count and principal loan amount.
     */
    @Test(timeout = 4000)
    public void testCalculateLoan_WithValidInstallmentAndPrincipalLoanAmount_ShouldReturnCorrectResponse() throws Throwable {
        LoaLoanValidationService loanValidationService = new LoaLoanValidationService((CusCustomerEntityService) null);
        LoaLoanService loanService = new LoaLoanService(loanValidationService, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        BigDecimal principalLoanAmount = BigDecimal.TEN;
        Integer installmentCount = 3100;
        LoaCalculateLoanResponseDto response = loanService.calculateLoan(installmentCount, principalLoanAmount);
        assertEquals("LoaCalculateLoanResponseDto(interestRate=0.0159, totalInterest=1478.7000, monthlyInstallmentAmount=0.4948, totalPayment=1533.7000, annualCostRate=0.1908, allocationFee=45)", response.toString());
    }

    /**
     * Test calculateLoan method with null installment count.
     */
    @Test(timeout = 4000)
    public void testCalculateLoan_WithNullInstallmentCount_ShouldThrowNullPointerException() throws Throwable {
        LoaLoanService loanService = new LoaLoanService((LoaLoanValidationService) null, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        BigDecimal principalLoanAmount = BigDecimal.TEN;
        try {
            loanService.calculateLoan((Integer) null, principalLoanAmount);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService", e);
        }
    }

    /**
     * Test calculateLoan method with zero installment count and principal loan amount.
     */
    @Test(timeout = 4000)
    public void testCalculateLoan_WithZeroInstallmentCountAndPrincipalLoanAmount_ShouldThrowArithmeticException() throws Throwable {
        LoaLoanValidationService loanValidationService = new LoaLoanValidationService((CusCustomerEntityService) null);
        LoaLoanService loanService = new LoaLoanService(loanValidationService, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        Integer installmentCount = 0;
        BigDecimal principalLoanAmount = BigDecimal.ZERO;
        try {
            loanService.calculateLoan(installmentCount, principalLoanAmount);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            verifyException("java.math.BigDecimal", e);
        }
    }

    /**
     * Test applyLoan method with null LoaApplyLoanDto.
     */
    @Test(timeout = 4000)
    public void testApplyLoan_WithNullLoaApplyLoanDto_ShouldThrowNullPointerException() throws Throwable {
        LoaLoanService loanService = new LoaLoanService((LoaLoanValidationService) null, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        LoaApplyLoanDto applyLoanDto = new LoaApplyLoanDto();
        try {
            loanService.applyLoan(applyLoanDto);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService", e);
        }
    }

    /**
     * Test calculateLateFee method with null loan id.
     */
    @Test(timeout = 4000)
    public void testCalculateLateFee_WithNullLoanId_ShouldThrowNullPointerException() throws Throwable {
        LoaLoanService loanService = new LoaLoanService((LoaLoanValidationService) null, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        try {
            loanService.calculateLateFee((Long) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService", e);
        }
    }

    /**
     * Test payInstallment method with null loan id.
     */
    @Test(timeout = 4000)
    public void testPayInstallment_WithNullLoanId_ShouldThrowNullPointerException() throws Throwable {
        LoaLoanService loanService = new LoaLoanService((LoaLoanValidationService) null, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        try {
            loanService.payInstallment((Long) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService", e);
        }
    }

    /**
     * Test findLoanById method with null loan id.
     */
    @Test(timeout = 4000)
    public void testFindLoanById_WithNullLoanId_ShouldThrowNullPointerException() throws Throwable {
        LoaLoanService loanService = new LoaLoanService((LoaLoanValidationService) null, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        try {
            loanService.findLoanById((Long) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService", e);
        }
    }

    /**
     * Test applyLoan method with empty LoaApplyLoanDto.
     */
    @Test(timeout = 4000)
    public void testApplyLoan_WithEmptyLoaApplyLoanDto_ShouldThrowRuntimeException() throws Throwable {
        LoaLoanValidationService loanValidationService = new LoaLoanValidationService((CusCustomerEntityService) null);
        LoaLoanService loanService = new LoaLoanService(loanValidationService, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        LoaApplyLoanDto applyLoanDto = new LoaApplyLoanDto();
        try {
            loanService.applyLoan(applyLoanDto);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanValidationService", e);
        }
    }

    /**
     * Test calculateLoan method with negative installment count.
     */
    @Test(timeout = 4000)
    public void testCalculateLoan_WithNegativeInstallmentCount_ShouldThrowRuntimeException() throws Throwable {
        LoaLoanValidationService loanValidationService = new LoaLoanValidationService((CusCustomerEntityService) null);
        LoaLoanService loanService = new LoaLoanService(loanValidationService, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        Integer installmentCount = -2652;
        BigDecimal principalLoanAmount = BigDecimal.TEN;
        try {
            loanService.calculateLoan(installmentCount, principalLoanAmount);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanValidationService", e);
        }
    }

    /**
     * Test payLoanOff method with null loan id.
     */
    @Test(timeout = 4000)
    public void testPayLoanOff_WithNullLoanId_ShouldThrowNullPointerException() throws Throwable {
        LoaLoanService loanService = new LoaLoanService((LoaLoanValidationService) null, (LoaLoanEntityService) null, (LoaLoanPaymentEntityService) null);
        try {
            loanService.payLoanOff((Long) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            verifyException("com.cbarkinozer.onlinebankingrestapi.app.loa.service.LoaLoanService", e);
        }
    }
}