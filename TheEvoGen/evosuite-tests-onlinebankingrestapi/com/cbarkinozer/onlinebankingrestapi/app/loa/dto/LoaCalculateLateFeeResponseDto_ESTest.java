/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:20:03 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.loa.dto.LoaCalculateLateFeeResponseDto;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaCalculateLateFeeResponseDto_ESTest extends LoaCalculateLateFeeResponseDto_ESTest_scaffolding {

    /**
     * Tests setting and getting totalLateFee with zero value.
     */
    @Test(timeout = 4000)
    public void testSetTotalLateFee_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal totalLateFee = BigDecimal.ZERO;
        response.setTotalLateFee(totalLateFee);
        BigDecimal result = response.getTotalLateFee();
        assertSame(totalLateFee, result);
    }

    /**
     * Tests setting and getting totalLateFee with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetTotalLateFee_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal totalLateFee = BigDecimal.TEN;
        response.setTotalLateFee(totalLateFee);
        BigDecimal result = response.getTotalLateFee();
        assertEquals((short) 10, result.shortValue());
    }

    /**
     * Tests setting and getting totalLateFee with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetTotalLateFee_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal totalLateFee = new BigDecimal(-1305L);
        response.setTotalLateFee(totalLateFee);
        BigDecimal result = response.getTotalLateFee();
        assertEquals((byte) (-25), result.byteValue());
    }

    /**
     * Tests setting and getting lateInterestTax with zero value.
     */
    @Test(timeout = 4000)
    public void testSetLateInterestTax_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateInterestTax = BigDecimal.ZERO;
        response.setLateInterestTax(lateInterestTax);
        BigDecimal result = response.getLateInterestTax();
        assertEquals((byte) 0, result.byteValue());
    }

    /**
     * Tests setting and getting lateInterestTax with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetLateInterestTax_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateInterestTax = BigDecimal.valueOf(-86L);
        response.setLateInterestTax(lateInterestTax);
        BigDecimal result = response.getLateInterestTax();
        assertEquals((short) (-86), result.shortValue());
    }

    /**
     * Tests setting and getting lateFeeRate with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetLateFeeRate_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateFeeRate = new BigDecimal(-1L);
        response.setLateFeeRate(lateFeeRate);
        BigDecimal result = response.getLateFeeRate();
        assertEquals((byte) (-1), result.byteValue());
    }

    /**
     * Tests setting and getting lateFeeRate with zero value.
     */
    @Test(timeout = 4000)
    public void testSetLateFeeRate_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateFeeRate = BigDecimal.ZERO;
        response.setLateFeeRate(lateFeeRate);
        BigDecimal result = response.getLateFeeRate();
        assertEquals((short) 0, result.shortValue());
    }

    /**
     * Tests setting and getting lateFeeRate with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetLateFeeRate_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateFeeRate = new BigDecimal(59);
        response.setLateFeeRate(lateFeeRate);
        BigDecimal result = response.getLateFeeRate();
        assertEquals((short) 59, result.shortValue());
    }

    /**
     * Tests setting and getting lateDayCount with zero value.
     */
    @Test(timeout = 4000)
    public void testSetLateDayCount_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        Long lateDayCount = 0L;
        response.setLateDayCount(lateDayCount);
        Long result = response.getLateDayCount();
        assertEquals(0L, (long) result);
    }

    /**
     * Tests setting and getting lateDayCount with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetLateDayCount_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        Long lateDayCount = 43L;
        response.setLateDayCount(lateDayCount);
        Long result = response.getLateDayCount();
        assertEquals(43L, (long) result);
    }

    /**
     * Tests setting and getting lateDayCount with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetLateDayCount_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        Long lateDayCount = -1L;
        response.setLateDayCount(lateDayCount);
        Long result = response.getLateDayCount();
        assertEquals(-1L, (long) result);
    }

    /**
     * Tests the canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        boolean result = response.canEqual(response);
        assertTrue(result);
    }

    /**
     * Tests the canEqual method with a different object type.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        Long differentObject = 458L;
        boolean result = response.canEqual(differentObject);
        assertFalse(result);
    }

    /**
     * Tests getting lateDayCount when it is null.
     */
    @Test(timeout = 4000)
    public void testGetLateDayCount_WhenNull_ShouldReturnNull() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        Long result = response.getLateDayCount();
        assertNull(result);
    }

    /**
     * Tests getting totalLateFee when it is null.
     */
    @Test(timeout = 4000)
    public void testGetTotalLateFee_WhenNull_ShouldReturnNull() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal result = response.getTotalLateFee();
        assertNull(result);
    }

    /**
     * Tests getting lateFeeRate when it is null.
     */
    @Test(timeout = 4000)
    public void testGetLateFeeRate_WhenNull_ShouldReturnNull() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal result = response.getLateFeeRate();
        assertNull(result);
    }

    /**
     * Tests getting lateInterestTax when it is null.
     */
    @Test(timeout = 4000)
    public void testGetLateInterestTax_WhenNull_ShouldReturnNull() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal result = response.getLateInterestTax();
        assertNull(result);
    }

    /**
     * Tests the equals method with different lateInterestTax values.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentLateInterestTax_ShouldReturnFalse() throws Throwable {
        LoaCalculateLateFeeResponseDto response1 = new LoaCalculateLateFeeResponseDto();
        LoaCalculateLateFeeResponseDto response2 = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateInterestTax = BigDecimal.TEN;
        response2.setLateInterestTax(lateInterestTax);
        assertFalse(response2.equals(response1));
        response1.setLateInterestTax(lateInterestTax);
        boolean result = response1.equals(response2);
        assertTrue(response2.equals(response1));
        assertTrue(result);
    }

    /**
     * Tests the equals method with different lateFeeRate values.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentLateFeeRate_ShouldReturnFalse() throws Throwable {
        LoaCalculateLateFeeResponseDto response1 = new LoaCalculateLateFeeResponseDto();
        LoaCalculateLateFeeResponseDto response2 = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateFeeRate = BigDecimal.ONE;
        response1.setLateFeeRate(lateFeeRate);
        assertFalse(response2.equals(response1));
        response2.setLateFeeRate(lateFeeRate);
        boolean result = response1.equals(response2);
        assertTrue(response2.equals(response1));
        assertTrue(result);
    }

    /**
     * Tests the equals method with different totalLateFee values.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentTotalLateFee_ShouldReturnFalse() throws Throwable {
        LoaCalculateLateFeeResponseDto response1 = new LoaCalculateLateFeeResponseDto();
        LoaCalculateLateFeeResponseDto response2 = new LoaCalculateLateFeeResponseDto();
        BigDecimal totalLateFee = BigDecimal.ONE;
        response2.setTotalLateFee(totalLateFee);
        assertFalse(response2.equals(response1));
        response1.setTotalLateFee(totalLateFee);
        boolean result = response2.equals(response1);
        assertTrue(response1.equals(response2));
        assertTrue(result);
    }

    /**
     * Tests the equals method with different lateDayCount values.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentLateDayCount_ShouldReturnFalse() throws Throwable {
        LoaCalculateLateFeeResponseDto response1 = new LoaCalculateLateFeeResponseDto();
        LoaCalculateLateFeeResponseDto response2 = new LoaCalculateLateFeeResponseDto();
        Long lateDayCount = -131L;
        response1.setLateDayCount(lateDayCount);
        assertFalse(response2.equals(response1));
        response2.setLateDayCount(lateDayCount);
        boolean result = response2.equals(response1);
        assertTrue(response2.equals(response1));
        assertTrue(result);
    }

    /**
     * Tests the equals method with a different object type.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        Object differentObject = new Object();
        boolean result = response.equals(differentObject);
        assertFalse(result);
    }

    /**
     * Tests the equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        boolean result = response.equals(response);
        assertTrue(result);
    }

    /**
     * Tests the hashCode method.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithValues_ShouldNotThrowException() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        BigDecimal lateInterestTax = new BigDecimal(4162L);
        response.setLateInterestTax(lateInterestTax);
        response.hashCode();
    }

    /**
     * Tests the toString method.
     */
    @Test(timeout = 4000)
    public void testToString_WhenNullValues_ShouldReturnCorrectString() throws Throwable {
        LoaCalculateLateFeeResponseDto response = new LoaCalculateLateFeeResponseDto();
        String result = response.toString();
        assertEquals("LoaCalculateLateFeeResponseDto(totalLateFee=null, lateFeeRate=null, lateInterestTax=null, lateDayCount=null)", result);
    }
}