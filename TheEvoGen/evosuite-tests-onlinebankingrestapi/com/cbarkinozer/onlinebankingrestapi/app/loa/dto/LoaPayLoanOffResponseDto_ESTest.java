/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:21:33 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.loa.dto.LoaPayLoanOffResponseDto;
import com.cbarkinozer.onlinebankingrestapi.app.loa.enums.LoaLoanStatusType;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaPayLoanOffResponseDto_ESTest extends LoaPayLoanOffResponseDto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getRemainingAmount();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getRemainingAmount();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '2';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getRemainingAmount();
      assertEquals((short)27608, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      loaPayLoanOffResponseDto0.setPaidAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getPaidAmount();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      loaPayLoanOffResponseDto0.setPaidAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getPaidAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = new BigDecimal((double) (-297L));
      loaPayLoanOffResponseDto0.setPaidAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getPaidAmount();
      assertEquals((short) (-297), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaLoanStatusType loaLoanStatusType0 = LoaLoanStatusType.PAID;
      loaPayLoanOffResponseDto0.setLoanStatusType(loaLoanStatusType0);
      LoaLoanStatusType loaLoanStatusType1 = loaPayLoanOffResponseDto0.getLoanStatusType();
      assertEquals(LoaLoanStatusType.PAID, loaLoanStatusType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long(0L);
      loaPayLoanOffResponseDto0.setId(long0);
      Long long1 = loaPayLoanOffResponseDto0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long(1L);
      loaPayLoanOffResponseDto0.setId(long0);
      Long long1 = loaPayLoanOffResponseDto0.getId();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long((-251L));
      loaPayLoanOffResponseDto0.setId(long0);
      Long long1 = loaPayLoanOffResponseDto0.getId();
      assertEquals((-251L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long(0L);
      loaPayLoanOffResponseDto0.setCustomerId(long0);
      Long long1 = loaPayLoanOffResponseDto0.getCustomerId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long(1144L);
      loaPayLoanOffResponseDto0.setCustomerId(long0);
      Long long1 = loaPayLoanOffResponseDto0.getCustomerId();
      assertEquals(1144L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long((-1995L));
      loaPayLoanOffResponseDto0.setCustomerId(long0);
      Long long1 = loaPayLoanOffResponseDto0.getCustomerId();
      assertEquals((-1995L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto0.canEqual(loaPayLoanOffResponseDto0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = loaPayLoanOffResponseDto0.getRemainingAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = loaPayLoanOffResponseDto0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = loaPayLoanOffResponseDto0.getPaidAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      loaPayLoanOffResponseDto0.getLoanStatusType();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = loaPayLoanOffResponseDto0.getCustomerId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      LoaLoanStatusType loaLoanStatusType0 = LoaLoanStatusType.LATE;
      loaPayLoanOffResponseDto0.setLoanStatusType(loaLoanStatusType0);
      assertFalse(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      
      loaPayLoanOffResponseDto1.setLoanStatusType(loaLoanStatusType0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertTrue(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaLoanStatusType loaLoanStatusType0 = LoaLoanStatusType.LATE;
      loaPayLoanOffResponseDto0.setLoanStatusType(loaLoanStatusType0);
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto1.equals(loaPayLoanOffResponseDto0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      LoaLoanStatusType loaLoanStatusType0 = LoaLoanStatusType.LATE;
      loaPayLoanOffResponseDto0.setLoanStatusType(loaLoanStatusType0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      loaPayLoanOffResponseDto1.setRemainingAmount(bigDecimal0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      loaPayLoanOffResponseDto1.setRemainingAmount(bigDecimal0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      loaPayLoanOffResponseDto0.setPaidAmount(bigDecimal0);
      assertFalse(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      
      loaPayLoanOffResponseDto1.setPaidAmount(bigDecimal0);
      boolean boolean0 = loaPayLoanOffResponseDto1.equals(loaPayLoanOffResponseDto0);
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      loaPayLoanOffResponseDto0.setPaidAmount(bigDecimal0);
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto1.equals(loaPayLoanOffResponseDto0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      loaPayLoanOffResponseDto1.setPaidAmount(bigDecimal0);
      boolean boolean0 = loaPayLoanOffResponseDto1.equals(loaPayLoanOffResponseDto0);
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long((-31L));
      loaPayLoanOffResponseDto0.setCustomerId(long0);
      assertFalse(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      
      loaPayLoanOffResponseDto1.setCustomerId(long0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertTrue(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long(0L);
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      loaPayLoanOffResponseDto1.setCustomerId(long0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      Long long0 = new Long((-31L));
      loaPayLoanOffResponseDto0.setCustomerId(long0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long((-1L));
      loaPayLoanOffResponseDto0.setId(long0);
      assertFalse(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      
      loaPayLoanOffResponseDto1.setId(long0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertTrue(loaPayLoanOffResponseDto0.equals((Object)loaPayLoanOffResponseDto1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      Long long0 = new Long((-3764L));
      loaPayLoanOffResponseDto1.setId(long0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto1 = new LoaPayLoanOffResponseDto();
      assertTrue(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
      
      Long long0 = new Long((-1L));
      loaPayLoanOffResponseDto0.setId(long0);
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto1);
      assertFalse(boolean0);
      assertFalse(loaPayLoanOffResponseDto1.equals((Object)loaPayLoanOffResponseDto0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto0.equals("LoaPayLoanOffResponseDto(id=null, customerId=null, paidAmount=null, remainingAmount=-768, loanStatusType=CONTINUING)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      boolean boolean0 = loaPayLoanOffResponseDto0.equals(loaPayLoanOffResponseDto0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      LoaLoanStatusType loaLoanStatusType0 = LoaLoanStatusType.PAID;
      loaPayLoanOffResponseDto0.setLoanStatusType(loaLoanStatusType0);
      loaPayLoanOffResponseDto0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      loaPayLoanOffResponseDto0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      loaPayLoanOffResponseDto0.setPaidAmount(bigDecimal0);
      loaPayLoanOffResponseDto0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long((-1995L));
      loaPayLoanOffResponseDto0.setCustomerId(long0);
      loaPayLoanOffResponseDto0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      Long long0 = new Long((-1995L));
      loaPayLoanOffResponseDto0.setId(long0);
      loaPayLoanOffResponseDto0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      String string0 = loaPayLoanOffResponseDto0.toString();
      assertEquals("LoaPayLoanOffResponseDto(id=null, customerId=null, paidAmount=null, remainingAmount=null, loanStatusType=null)", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LoaPayLoanOffResponseDto loaPayLoanOffResponseDto0 = new LoaPayLoanOffResponseDto();
      BigDecimal bigDecimal0 = new BigDecimal((-768L));
      loaPayLoanOffResponseDto0.setRemainingAmount(bigDecimal0);
      BigDecimal bigDecimal1 = loaPayLoanOffResponseDto0.getRemainingAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }
}
