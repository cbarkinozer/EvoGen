/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:19:55 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.loa.dto.LoaApplyLoanDto;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaApplyLoanDto_ESTest extends LoaApplyLoanDto_ESTest_scaffolding {

    /**
     * Test setting and getting principal loan amount.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalLoanAmount_WithNegativeNumber_ShouldReturnSameValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal principalLoanAmount = new BigDecimal(-576);
        loanDto.setPrincipalLoanAmount(principalLoanAmount);
        BigDecimal retrievedPrincipalLoanAmount = loanDto.getPrincipalLoanAmount();
        assertSame(retrievedPrincipalLoanAmount, principalLoanAmount);
    }

    /**
     * Test setting and getting principal loan amount with a specific math context.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalLoanAmount_WithZeroAndSpecificMathContext_ShouldReturnCorrectShortValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        RoundingMode roundingMode = RoundingMode.HALF_UP;
        MathContext mathContext = new MathContext(59, roundingMode);
        BigDecimal principalLoanAmount = new BigDecimal(0, mathContext);
        loanDto.setPrincipalLoanAmount(principalLoanAmount);
        BigDecimal retrievedPrincipalLoanAmount = loanDto.getPrincipalLoanAmount();
        assertEquals((short) 0, retrievedPrincipalLoanAmount.shortValue());
    }

    /**
     * Test setting and getting principal loan amount with a positive number.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalLoanAmount_WithPositiveNumber_ShouldReturnCorrectByteValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal principalLoanAmount = BigDecimal.TEN;
        loanDto.setPrincipalLoanAmount(principalLoanAmount);
        BigDecimal retrievedPrincipalLoanAmount = loanDto.getPrincipalLoanAmount();
        assertEquals((byte) 10, retrievedPrincipalLoanAmount.byteValue());
    }

    /**
     * Test setting and getting monthly salary with a negative number.
     */
    @Test(timeout = 4000)
    public void testSetMonthlySalary_WithNegativeNumber_ShouldReturnCorrectShortValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal monthlySalary = new BigDecimal(-106);
        loanDto.setMonthlySalary(monthlySalary);
        BigDecimal retrievedMonthlySalary = loanDto.getMonthlySalary();
        assertEquals((short) (-106), retrievedMonthlySalary.shortValue());
    }

    /**
     * Test setting and getting monthly salary with zero.
     */
    @Test(timeout = 4000)
    public void testSetMonthlySalary_WithZero_ShouldReturnSameValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal monthlySalary = BigDecimal.ZERO;
        loanDto.setMonthlySalary(monthlySalary);
        BigDecimal retrievedMonthlySalary = loanDto.getMonthlySalary();
        assertSame(retrievedMonthlySalary, monthlySalary);
    }

    /**
     * Test setting and getting monthly salary with a positive number.
     */
    @Test(timeout = 4000)
    public void testSetMonthlySalary_WithPositiveNumber_ShouldReturnSameValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal monthlySalary = new BigDecimal(3916L);
        loanDto.setMonthlySalary(monthlySalary);
        BigDecimal retrievedMonthlySalary = loanDto.getMonthlySalary();
        assertSame(retrievedMonthlySalary, monthlySalary);
    }

    /**
     * Test setting and getting installment count with zero.
     */
    @Test(timeout = 4000)
    public void testSetInstallmentCount_WithZero_ShouldReturnCorrectValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        Integer installmentCount = 0;
        loanDto.setInstallmentCount(installmentCount);
        Integer retrievedInstallmentCount = loanDto.getInstallmentCount();
        assertEquals(0, (int) retrievedInstallmentCount);
    }

    /**
     * Test setting and getting installment count with a positive number.
     */
    @Test(timeout = 4000)
    public void testSetInstallmentCount_WithPositiveNumber_ShouldReturnCorrectValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        Integer installmentCount = 398;
        loanDto.setInstallmentCount(installmentCount);
        Integer retrievedInstallmentCount = loanDto.getInstallmentCount();
        assertEquals(398, (int) retrievedInstallmentCount);
    }

    /**
     * Test setting and getting installment count with a negative number.
     */
    @Test(timeout = 4000)
    public void testSetInstallmentCount_WithNegativeNumber_ShouldReturnCorrectValue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        Integer installmentCount = -862;
        loanDto.setInstallmentCount(installmentCount);
        Integer retrievedInstallmentCount = loanDto.getInstallmentCount();
        assertEquals(-862, (int) retrievedInstallmentCount);
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        boolean result = loanDto.canEqual(loanDto);
        assertTrue(result);
    }

    /**
     * Test canEqual method with a different object type.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        MathContext mathContext = MathContext.DECIMAL64;
        BigDecimal bigDecimal = new BigDecimal(3559, mathContext);
        boolean result = loanDto.canEqual(bigDecimal);
        assertFalse(result);
    }

    /**
     * Test getting installment count when not set.
     */
    @Test(timeout = 4000)
    public void testGetInstallmentCount_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        Integer installmentCount = loanDto.getInstallmentCount();
        assertNull(installmentCount);
    }

    /**
     * Test getting monthly salary when not set.
     */
    @Test(timeout = 4000)
    public void testGetMonthlySalary_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal monthlySalary = loanDto.getMonthlySalary();
        assertNull(monthlySalary);
    }

    /**
     * Test getting principal loan amount when not set.
     */
    @Test(timeout = 4000)
    public void testGetPrincipalLoanAmount_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal principalLoanAmount = loanDto.getPrincipalLoanAmount();
        assertNull(principalLoanAmount);
    }

    /**
     * Test equals method with the same monthly salary.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameMonthlySalary_ShouldReturnTrue() throws Throwable {
        LoaApplyLoanDto loanDto1 = new LoaApplyLoanDto();
        LoaApplyLoanDto loanDto2 = new LoaApplyLoanDto();
        BigDecimal monthlySalary = BigDecimal.ZERO;
        loanDto1.setMonthlySalary(monthlySalary);
        assertFalse(loanDto2.equals(loanDto1));
        loanDto2.setMonthlySalary(monthlySalary);
        boolean result = loanDto2.equals(loanDto1);
        assertTrue(result);
    }

    /**
     * Test equals method with different monthly salary.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentMonthlySalary_ShouldReturnFalse() throws Throwable {
        LoaApplyLoanDto loanDto1 = new LoaApplyLoanDto();
        LoaApplyLoanDto loanDto2 = new LoaApplyLoanDto();
        assertTrue(loanDto2.equals(loanDto1));
        BigDecimal monthlySalary = BigDecimal.ONE;
        loanDto2.setMonthlySalary(monthlySalary);
        boolean result = loanDto1.equals(loanDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with different principal loan amount.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentPrincipalLoanAmount_ShouldReturnFalse() throws Throwable {
        LoaApplyLoanDto loanDto1 = new LoaApplyLoanDto();
        LoaApplyLoanDto loanDto2 = new LoaApplyLoanDto();
        assertTrue(loanDto2.equals(loanDto1));
        BigDecimal principalLoanAmount = BigDecimal.ONE;
        loanDto2.setPrincipalLoanAmount(principalLoanAmount);
        boolean result = loanDto1.equals(loanDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with different installment count.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentInstallmentCount_ShouldReturnFalse() throws Throwable {
        LoaApplyLoanDto loanDto1 = new LoaApplyLoanDto();
        LoaApplyLoanDto loanDto2 = new LoaApplyLoanDto();
        assertTrue(loanDto2.equals(loanDto1));
        Integer installmentCount = -1;
        loanDto2.setInstallmentCount(installmentCount);
        boolean result = loanDto1.equals(loanDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with a different object type.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal bigDecimal = BigDecimal.ZERO;
        boolean result = loanDto.equals(bigDecimal);
        assertFalse(result);
    }

    /**
     * Test equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        boolean result = loanDto.equals(loanDto);
        assertTrue(result);
    }

    /**
     * Test hashCode method with monthly salary set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithMonthlySalarySet_ShouldNotThrowException() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal monthlySalary = new BigDecimal(1502);
        loanDto.setMonthlySalary(monthlySalary);
        loanDto.hashCode();
    }

    /**
     * Test hashCode method with principal loan amount set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithPrincipalLoanAmountSet_ShouldNotThrowException() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        BigDecimal principalLoanAmount = new BigDecimal(1502);
        loanDto.setPrincipalLoanAmount(principalLoanAmount);
        loanDto.hashCode();
    }

    /**
     * Test hashCode method with installment count set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithInstallmentCountSet_ShouldNotThrowException() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        Integer installmentCount = 0;
        loanDto.setInstallmentCount(installmentCount);
        loanDto.hashCode();
    }

    /**
     * Test toString method when all fields are null.
     */
    @Test(timeout = 4000)
    public void testToString_WhenAllFieldsAreNull_ShouldReturnCorrectString() throws Throwable {
        LoaApplyLoanDto loanDto = new LoaApplyLoanDto();
        String result = loanDto.toString();
        assertEquals("LoaApplyLoanDto(installmentCount=null, principalLoanAmount=null, monthlySalary=null)", result);
    }

    /**
     * Test equals method with the same principal loan amount.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSamePrincipalLoanAmount_ShouldReturnTrue() throws Throwable {
        LoaApplyLoanDto loanDto1 = new LoaApplyLoanDto();
        LoaApplyLoanDto loanDto2 = new LoaApplyLoanDto();
        BigDecimal principalLoanAmount = BigDecimal.TEN;
        loanDto1.setPrincipalLoanAmount(principalLoanAmount);
        assertFalse(loanDto2.equals(loanDto1));
        loanDto2.setPrincipalLoanAmount(principalLoanAmount);
        boolean result = loanDto2.equals(loanDto1);
        assertTrue(result);
    }

    /**
     * Test equals method with the same installment count.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameInstallmentCount_ShouldReturnTrue() throws Throwable {
        LoaApplyLoanDto loanDto1 = new LoaApplyLoanDto();
        LoaApplyLoanDto loanDto2 = new LoaApplyLoanDto();
        Integer installmentCount = 1065;
        loanDto1.setInstallmentCount(installmentCount);
        assertFalse(loanDto2.equals(loanDto1));
        loanDto2.setInstallmentCount(installmentCount);
        boolean result = loanDto2.equals(loanDto1);
        assertTrue(result);
    }
}