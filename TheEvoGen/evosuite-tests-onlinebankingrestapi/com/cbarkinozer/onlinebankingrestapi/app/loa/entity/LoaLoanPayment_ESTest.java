/*
 * This file was automatically generated by EvoSuite
 * Sat Jun21 21:21:22 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.loa.entity.LoaLoanPayment;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaLoanPayment_ESTest extends LoaLoanPayment_ESTest_scaffolding {

    /**
     * Test setting and getting payment date.
     */
    @Test(timeout = 4000)
    public void testSetPaymentDate_WithValidDate_ShouldReturnSameDate() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Period period = Period.ofDays(0);
        IsoChronology isoChronology = period.getChronology();
        LocalDate dateNow = MockIsoChronology.dateNow(isoChronology);
        loanPayment.setPaymentDate(dateNow);
        LocalDate retrievedDate = loanPayment.getPaymentDate();
        assertSame(retrievedDate, dateNow);
    }

    /**
     * Test setting and getting payment amount with zero value.
     */
    @Test(timeout = 4000)
    public void testSetPaymentAmount_WithZeroValue_ShouldReturnSameAmount() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        BigDecimal paymentAmount = new BigDecimal(0L);
        loanPayment.setPaymentAmount(paymentAmount);
        BigDecimal retrievedAmount = loanPayment.getPaymentAmount();
        assertSame(retrievedAmount, paymentAmount);
    }

    /**
     * Test setting and getting payment amount with negative value.
     */
    @Test(timeout = 4000)
    public void testSetPaymentAmount_WithNegativeValue_ShouldReturnCorrectAmount() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        BigDecimal paymentAmount = new BigDecimal((double) (-2285L));
        loanPayment.setPaymentAmount(paymentAmount);
        BigDecimal retrievedAmount = loanPayment.getPaymentAmount();
        assertEquals((short) (-2285), retrievedAmount.shortValue());
    }

    /**
     * Test setting and getting loan ID with zero value.
     */
    @Test(timeout = 4000)
    public void testSetLoanId_WithZeroValue_ShouldReturnCorrectId() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long loanId = new Long(0L);
        loanPayment.setLoanId(loanId);
        Long retrievedId = loanPayment.getLoanId();
        assertEquals(0L, (long) retrievedId);
    }

    /**
     * Test setting and getting loan ID with positive value.
     */
    @Test(timeout = 4000)
    public void testSetLoanId_WithPositiveValue_ShouldReturnCorrectId() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long loanId = new Long(580L);
        loanPayment.setLoanId(loanId);
        Long retrievedId = loanPayment.getLoanId();
        assertEquals(580L, (long) retrievedId);
    }

    /**
     * Test setting and getting ID with zero value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithZeroValue_ShouldReturnCorrectId() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long id = new Long(0L);
        loanPayment.setId(id);
        Long retrievedId = loanPayment.getId();
        assertEquals(0L, (long) retrievedId);
    }

    /**
     * Test setting and getting ID with negative value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithNegativeValue_ShouldReturnCorrectId() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long id = Long.valueOf((-3334L));
        loanPayment.setId(id);
        Long retrievedId = loanPayment.getId();
        assertEquals((-3334L), (long) retrievedId);
    }

    /**
     * Test setting and getting payment amount with positive value.
     */
    @Test(timeout = 4000)
    public void testSetPaymentAmount_WithPositiveValue_ShouldReturnSameAmount() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        BigDecimal paymentAmount = new BigDecimal(1443L);
        loanPayment.setPaymentAmount(paymentAmount);
        BigDecimal retrievedAmount = loanPayment.getPaymentAmount();
        assertSame(retrievedAmount, paymentAmount);
    }

    /**
     * Test getting loan ID when not set.
     */
    @Test(timeout = 4000)
    public void testGetLoanId_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long loanId = loanPayment.getLoanId();
        assertNull(loanId);
    }

    /**
     * Test setting and getting loan ID with negative value.
     */
    @Test(timeout = 4000)
    public void testSetLoanId_WithNegativeValue_ShouldReturnCorrectId() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long loanId = new Long((-1L));
        loanPayment.setLoanId(loanId);
        Long retrievedId = loanPayment.getLoanId();
        assertEquals((-1L), (long) retrievedId);
    }

    /**
     * Test getting payment amount when not set.
     */
    @Test(timeout = 4000)
    public void testGetPaymentAmount_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        BigDecimal paymentAmount = loanPayment.getPaymentAmount();
        assertNull(paymentAmount);
    }

    /**
     * Test setting and getting ID with positive value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithPositiveValue_ShouldReturnCorrectId() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long id = new Long(1443L);
        loanPayment.setId(id);
        Long retrievedId = loanPayment.getId();
        assertEquals(1443L, (long) retrievedId);
    }

    /**
     * Test getting ID when not set.
     */
    @Test(timeout = 4000)
    public void testGetId_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        Long id = loanPayment.getId();
        assertNull(id);
    }

    /**
     * Test getting payment date when not set.
     */
    @Test(timeout = 4000)
    public void testGetPaymentDate_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoanPayment loanPayment = new LoaLoanPayment();
        LocalDate paymentDate = loanPayment.getPaymentDate();
        assertNull(paymentDate);
    }
}