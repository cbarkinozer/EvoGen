/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:00:00 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.loa.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.loa.entity.LoaLoan;
import com.cbarkinozer.onlinebankingrestapi.app.loa.enums.LoaLoanStatusType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoaLoan_ESTest extends LoaLoan_ESTest_scaffolding {

    /**
     * Test setting and getting remaining principal with zero value.
     */
    @Test(timeout = 4000)
    public void testSetRemainingPrincipal_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal remainingPrincipal = BigDecimal.ZERO;
        loan.setRemainingPrincipal(remainingPrincipal);
        BigDecimal result = loan.getRemainingPrincipal();
        assertEquals((byte) 0, result.byteValue());
    }

    /**
     * Test setting and getting remaining principal with negative value.
     */
    @Test(timeout = 4000)
    public void testSetRemainingPrincipal_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal remainingPrincipal = new BigDecimal(-2341.0950581946);
        loan.setRemainingPrincipal(remainingPrincipal);
        BigDecimal result = loan.getRemainingPrincipal();
        assertEquals((byte) (-37), result.byteValue());
    }

    /**
     * Test setting and getting principal to be paid with positive value.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalToBePaid_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal principalToBePaid = BigDecimal.TEN;
        loan.setPrincipalToBePaid(principalToBePaid);
        BigDecimal result = loan.getPrincipalToBePaid();
        assertEquals((byte) 10, result.byteValue());
    }

    /**
     * Test setting and getting principal to be paid with negative value.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalToBePaid_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal principalToBePaid = new BigDecimal(-889L);
        loan.setPrincipalToBePaid(principalToBePaid);
        BigDecimal result = loan.getPrincipalToBePaid();
        assertSame(principalToBePaid, result);
    }

    /**
     * Test setting and getting principal loan amount with zero value.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalLoanAmount_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal principalLoanAmount = new BigDecimal(0L);
        loan.setPrincipalLoanAmount(principalLoanAmount);
        BigDecimal result = loan.getPrincipalLoanAmount();
        assertEquals((byte) 0, result.byteValue());
    }

    /**
     * Test setting and getting principal loan amount with positive value.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalLoanAmount_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal principalLoanAmount = BigDecimal.TEN;
        loan.setPrincipalLoanAmount(principalLoanAmount);
        BigDecimal result = loan.getPrincipalLoanAmount();
        assertSame(principalLoanAmount, result);
    }

    /**
     * Test setting and getting principal loan amount with negative value.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalLoanAmount_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal principalLoanAmount = new BigDecimal(-889L);
        loan.setPrincipalLoanAmount(principalLoanAmount);
        BigDecimal result = loan.getPrincipalLoanAmount();
        assertEquals((byte) (-121), result.byteValue());
    }

    /**
     * Test setting and getting monthly installment amount with positive value.
     */
    @Test(timeout = 4000)
    public void testSetMonthlyInstallmentAmount_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigInteger bigInteger = BigInteger.TEN;
        BigDecimal monthlyInstallmentAmount = new BigDecimal(bigInteger);
        loan.setMonthlyInstallmentAmount(monthlyInstallmentAmount);
        BigDecimal result = loan.getMonthlyInstallmentAmount();
        assertEquals((byte) 10, result.byteValue());
    }

    /**
     * Test setting and getting monthly installment amount with negative value.
     */
    @Test(timeout = 4000)
    public void testSetMonthlyInstallmentAmount_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal monthlyInstallmentAmount = new BigDecimal(-1);
        loan.setMonthlyInstallmentAmount(monthlyInstallmentAmount);
        BigDecimal result = loan.getMonthlyInstallmentAmount();
        assertEquals((short) (-1), result.shortValue());
    }

    /**
     * Test setting and getting interest to be paid with zero value.
     */
    @Test(timeout = 4000)
    public void testSetInterestToBePaid_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal interestToBePaid = BigDecimal.ZERO;
        loan.setInterestToBePaid(interestToBePaid);
        BigDecimal result = loan.getInterestToBePaid();
        assertEquals((short) 0, result.shortValue());
    }

    /**
     * Test setting and getting interest to be paid with positive value.
     */
    @Test(timeout = 4000)
    public void testSetInterestToBePaid_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal interestToBePaid = BigDecimal.ONE;
        loan.setInterestToBePaid(interestToBePaid);
        BigDecimal result = loan.getInterestToBePaid();
        assertSame(interestToBePaid, result);
    }

    /**
     * Test setting and getting installment count with zero value.
     */
    @Test(timeout = 4000)
    public void testSetInstallmentCount_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Integer installmentCount = 0;
        loan.setInstallmentCount(installmentCount);
        Integer result = loan.getInstallmentCount();
        assertEquals(0, (int) result);
    }

    /**
     * Test setting and getting installment count with positive value.
     */
    @Test(timeout = 4000)
    public void testSetInstallmentCount_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Integer installmentCount = 102;
        loan.setInstallmentCount(installmentCount);
        Integer result = loan.getInstallmentCount();
        assertEquals(102, (int) result);
    }

    /**
     * Test setting and getting id with zero value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long id = 0L;
        loan.setId(id);
        Long result = loan.getId();
        assertEquals(0L, (long) result);
    }

    /**
     * Test setting and getting id with positive value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long id = 3044L;
        loan.setId(id);
        Long result = loan.getId();
        assertEquals(3044L, (long) result);
    }

    /**
     * Test setting and getting id with negative value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long id = -16L;
        loan.setId(id);
        Long result = loan.getId();
        assertEquals(-16L, (long) result);
    }

    /**
     * Test setting and getting due date.
     */
    @Test(timeout = 4000)
    public void testSetDueDate_WithValidDate_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        LocalDate dueDate = MockLocalDate.ofYearDay(-1, 251);
        loan.setDueDate(dueDate);
        LocalDate result = loan.getDueDate();
        assertSame(dueDate, result);
    }

    /**
     * Test setting and getting customer id with positive value.
     */
    @Test(timeout = 4000)
    public void testSetCustomerId_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long customerId = 368L;
        loan.setCustomerId(customerId);
        Long result = loan.getCustomerId();
        assertEquals(368L, (long) result);
    }

    /**
     * Test setting and getting customer id with negative value.
     */
    @Test(timeout = 4000)
    public void testSetCustomerId_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long customerId = -1052L;
        loan.setCustomerId(customerId);
        Long result = loan.getCustomerId();
        assertEquals(-1052L, (long) result);
    }

    /**
     * Test getting monthly installment amount when not set.
     */
    @Test(timeout = 4000)
    public void testGetMonthlyInstallmentAmount_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal result = loan.getMonthlyInstallmentAmount();
        assertNull(result);
    }

    /**
     * Test setting and getting remaining principal with positive value.
     */
    @Test(timeout = 4000)
    public void testSetRemainingPrincipal_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal remainingPrincipal = BigDecimal.TEN;
        loan.setRemainingPrincipal(remainingPrincipal);
        BigDecimal result = loan.getRemainingPrincipal();
        assertEquals((short) 10, result.shortValue());
    }

    /**
     * Test getting loan status type when not set.
     */
    @Test(timeout = 4000)
    public void testGetLoanStatusType_WhenNotSet_ShouldNotThrowException() throws Throwable {
        LoaLoan loan = new LoaLoan();
        loan.getLoanStatusType();
    }

    /**
     * Test getting principal loan amount when not set.
     */
    @Test(timeout = 4000)
    public void testGetPrincipalLoanAmount_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal result = loan.getPrincipalLoanAmount();
        assertNull(result);
    }

    /**
     * Test setting and getting interest to be paid with negative value.
     */
    @Test(timeout = 4000)
    public void testSetInterestToBePaid_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal interestToBePaid = new BigDecimal(-1.0);
        loan.setInterestToBePaid(interestToBePaid);
        BigDecimal result = loan.getInterestToBePaid();
        assertEquals((byte) (-1), result.byteValue());
    }

    /**
     * Test setting and getting customer id with zero value.
     */
    @Test(timeout = 4000)
    public void testSetCustomerId_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long customerId = 0L;
        loan.setCustomerId(customerId);
        Long result = loan.getCustomerId();
        assertEquals(0L, (long) result);
    }

    /**
     * Test getting principal to be paid when not set.
     */
    @Test(timeout = 4000)
    public void testGetPrincipalToBePaid_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal result = loan.getPrincipalToBePaid();
        assertNull(result);
    }

    /**
     * Test getting id when not set.
     */
    @Test(timeout = 4000)
    public void testGetId_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long result = loan.getId();
        assertNull(result);
    }

    /**
     * Test getting due date when not set.
     */
    @Test(timeout = 4000)
    public void testGetDueDate_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        LocalDate result = loan.getDueDate();
        assertNull(result);
    }

    /**
     * Test getting installment count when not set.
     */
    @Test(timeout = 4000)
    public void testGetInstallmentCount_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Integer result = loan.getInstallmentCount();
        assertNull(result);
    }

    /**
     * Test getting remaining principal when not set.
     */
    @Test(timeout = 4000)
    public void testGetRemainingPrincipal_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal result = loan.getRemainingPrincipal();
        assertNull(result);
    }

    /**
     * Test getting customer id when not set.
     */
    @Test(timeout = 4000)
    public void testGetCustomerId_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Long result = loan.getCustomerId();
        assertNull(result);
    }

    /**
     * Test setting and getting loan status type.
     */
    @Test(timeout = 4000)
    public void testSetLoanStatusType_WithValidStatus_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        LoaLoanStatusType loanStatusType = LoaLoanStatusType.CONTINUING;
        loan.setLoanStatusType(loanStatusType);
        LoaLoanStatusType result = loan.getLoanStatusType();
        assertEquals(LoaLoanStatusType.CONTINUING, result);
    }

    /**
     * Test setting and getting installment count with negative value.
     */
    @Test(timeout = 4000)
    public void testSetInstallmentCount_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        Integer installmentCount = -57;
        loan.setInstallmentCount(installmentCount);
        Integer result = loan.getInstallmentCount();
        assertEquals(-57, (int) result);
    }

    /**
     * Test setting and getting monthly installment amount with zero value from BigInteger.
     */
    @Test(timeout = 4000)
    public void testSetMonthlyInstallmentAmount_WithZeroValueFromBigInteger_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        byte[] bytes = new byte[7];
        BigInteger bigInteger = new BigInteger(bytes);
        BigDecimal monthlyInstallmentAmount = new BigDecimal(bigInteger);
        loan.setMonthlyInstallmentAmount(monthlyInstallmentAmount);
        BigDecimal result = loan.getMonthlyInstallmentAmount();
        assertEquals((short) 0, result.shortValue());
    }

    /**
     * Test getting interest to be paid when not set.
     */
    @Test(timeout = 4000)
    public void testGetInterestToBePaid_WhenNotSet_ShouldReturnNull() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal result = loan.getInterestToBePaid();
        assertNull(result);
    }

    /**
     * Test setting and getting principal to be paid with zero value.
     */
    @Test(timeout = 4000)
    public void testSetPrincipalToBePaid_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        LoaLoan loan = new LoaLoan();
        BigDecimal principalToBePaid = BigDecimal.ZERO;
        loan.setPrincipalToBePaid(principalToBePaid);
        BigDecimal result = loan.getPrincipalToBePaid();
        assertEquals((short) 0, result.shortValue());
    }
}