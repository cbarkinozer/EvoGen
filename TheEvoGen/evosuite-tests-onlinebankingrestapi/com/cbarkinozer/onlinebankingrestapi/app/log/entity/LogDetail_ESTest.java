/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:22:00 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.log.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.log.entity.LogDetail;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogDetail_ESTest extends LogDetail_ESTest_scaffolding {

    /**
     * Test setting and getting a message.
     */
    @Test(timeout = 4000)
    public void testSetMessage_WithValidMessage_ShouldReturnSameMessage() throws Throwable {
        LogDetail logDetail = new LogDetail();
        logDetail.setMessage("2.=v~ r2je2");
        String message = logDetail.getMessage();
        assertEquals("2.=v~ r2je2", message);
    }

    /**
     * Test setting and getting an empty message.
     */
    @Test(timeout = 4000)
    public void testSetMessage_WithEmptyMessage_ShouldReturnEmptyMessage() throws Throwable {
        LogDetail logDetail = new LogDetail();
        logDetail.setMessage("");
        String message = logDetail.getMessage();
        assertEquals("", message);
    }

    /**
     * Test setting and getting an ID of 0.
     */
    @Test(timeout = 4000)
    public void testSetId_WithZero_ShouldReturnZero() throws Throwable {
        LogDetail logDetail = new LogDetail();
        Long id = 0L;
        logDetail.setId(id);
        Long retrievedId = logDetail.getId();
        assertEquals(0L, (long) retrievedId);
    }

    /**
     * Test setting and getting a non-zero ID.
     */
    @Test(timeout = 4000)
    public void testSetId_WithPositiveNumber_ShouldReturnSameNumber() throws Throwable {
        LogDetail logDetail = new LogDetail();
        Long id = 1640L;
        logDetail.setId(id);
        Long retrievedId = logDetail.getId();
        assertEquals(1640L, (long) retrievedId);
    }

    /**
     * Test setting and getting details.
     */
    @Test(timeout = 4000)
    public void testSetDetails_WithValidDetails_ShouldReturnSameDetails() throws Throwable {
        LogDetail logDetail = new LogDetail();
        logDetail.setDetails("5Hvp<");
        String details = logDetail.getDetails();
        assertEquals("5Hvp<", details);
    }

    /**
     * Test setting and getting empty details.
     */
    @Test(timeout = 4000)
    public void testSetDetails_WithEmptyDetails_ShouldReturnEmptyDetails() throws Throwable {
        LogDetail logDetail = new LogDetail();
        logDetail.setDetails("");
        String details = logDetail.getDetails();
        assertEquals("", details);
    }

    /**
     * Test setting and getting date time.
     */
    @Test(timeout = 4000)
    public void testSetDateTime_WithValidDateTime_ShouldReturnSameDateTime() throws Throwable {
        LogDetail logDetail = new LogDetail();
        ZoneOffset zoneOffset = ZoneOffset.ofHours(-1);
        Clock clock = MockClock.tickMinutes(zoneOffset);
        LocalDateTime dateTime = MockLocalDateTime.now(clock);
        logDetail.setDateTime(dateTime);
        LocalDateTime retrievedDateTime = logDetail.getDateTime();
        assertSame(retrievedDateTime, dateTime);
    }

    /**
     * Test getting message when it is null.
     */
    @Test(timeout = 4000)
    public void testGetMessage_WithNullMessage_ShouldReturnNull() throws Throwable {
        LogDetail logDetail = new LogDetail();
        String message = logDetail.getMessage();
        assertNull(message);
    }

    /**
     * Test setting and getting a negative ID.
     */
    @Test(timeout = 4000)
    public void testSetId_WithNegativeNumber_ShouldReturnSameNumber() throws Throwable {
        LogDetail logDetail = new LogDetail();
        Long id = -2358L;
        logDetail.setId(id);
        Long retrievedId = logDetail.getId();
        assertEquals(-2358L, (long) retrievedId);
    }

    /**
     * Test getting date time when it is null.
     */
    @Test(timeout = 4000)
    public void testGetDateTime_WithNullDateTime_ShouldReturnNull() throws Throwable {
        LogDetail logDetail = new LogDetail();
        LocalDateTime dateTime = logDetail.getDateTime();
        assertNull(dateTime);
    }

    /**
     * Test getting details when it is null.
     */
    @Test(timeout = 4000)
    public void testGetDetails_WithNullDetails_ShouldReturnNull() throws Throwable {
        LogDetail logDetail = new LogDetail();
        String details = logDetail.getDetails();
        assertNull(details);
    }

    /**
     * Test getting ID when it is null.
     */
    @Test(timeout = 4000)
    public void testGetId_WithNullId_ShouldReturnNull() throws Throwable {
        LogDetail logDetail = new LogDetail();
        Long id = logDetail.getId();
        assertNull(id);
    }
}