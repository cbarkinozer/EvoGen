/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:19:03 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.kafka.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.kafka.dto.LogMessage;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class LogMessage_ESTest extends LogMessage_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testToString_WithIdAndMessageAndDateTime_ShouldReturnCorrectString() throws Throwable {
        Long id = -1L;
        LocalDateTime dateTime = MockLocalDateTime.now();
        LogMessage logMessage = new LogMessage(id, "#s>5MLR+vY7}EkPi", "", dateTime);
        logMessage.getMessage();
        assertEquals("LogMessage(id=-1, message=#s>5MLR+vY7}EkPi, description=, dateTime=2014-02-14T20:21:21.320)", logMessage.toString());
    }

    @Test(timeout = 4000)
    public void testGetMessage_WithEmptyMessage_ShouldReturnEmptyString() throws Throwable {
        Long id = -1398L;
        ZoneId zoneId = ZoneId.systemDefault();
        LocalDateTime dateTime = MockLocalDateTime.now(zoneId);
        LogMessage logMessage = new LogMessage(id, "", "", dateTime);
        String message = logMessage.getMessage();
        assertEquals("", message);
    }

    @Test(timeout = 4000)
    public void testToString_WithNullIdAndMessage_ShouldReturnCorrectString() throws Throwable {
        ZoneOffset zoneOffset = ZoneOffset.MAX;
        LocalDateTime dateTime = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset);
        Long id = Long.getLong("Ck@(2BxSN&", 0L);
        LogMessage logMessage = new LogMessage(id, null, "Ck@(2BxSN&", dateTime);
        logMessage.getId();
        assertEquals("LogMessage(id=0, message=null, description=Ck@(2BxSN&, dateTime=1970-01-01T18:00)", logMessage.toString());
    }

    @Test(timeout = 4000)
    public void testSetId_WithValidId_ShouldSetIdCorrectly() throws Throwable {
        LogMessage logMessage = new LogMessage();
        Long id = 3382L;
        logMessage.setId(id);
        Long retrievedId = logMessage.getId();
        assertEquals(3382L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    public void testGetId_WithValidId_ShouldReturnCorrectId() throws Throwable {
        Long id = -1L;
        LocalDateTime dateTime = MockLocalDateTime.now();
        LogMessage logMessage = new LogMessage(id, "rb+r*", "rb+r*", dateTime);
        Long retrievedId = logMessage.getId();
        assertEquals(-1L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    public void testGetDescription_WithValidDescription_ShouldReturnCorrectDescription() throws Throwable {
        Long id = -1L;
        LocalDateTime dateTime = MockLocalDateTime.now();
        LogMessage logMessage = new LogMessage(id, "rb+r*", "rb+r*", dateTime);
        String description = logMessage.getDescription();
        assertEquals("rb+r*", description);
    }

    @Test(timeout = 4000)
    public void testSetDateTime_WithValidDateTime_ShouldSetDateTimeCorrectly() throws Throwable {
        LogMessage logMessage = new LogMessage();
        Instant instant = MockInstant.ofEpochMilli(1833L);
        ZoneOffset zoneOffset = ZoneOffset.MIN;
        LocalDateTime dateTime = MockLocalDateTime.ofInstant(instant, zoneOffset);
        logMessage.setDateTime(dateTime);
        LocalDateTime retrievedDateTime = logMessage.getDateTime();
        assertSame(retrievedDateTime, dateTime);
    }

    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        LogMessage logMessage = new LogMessage();
        boolean result = logMessage.canEqual(logMessage);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObject_ShouldReturnFalse() throws Throwable {
        LogMessage logMessage = new LogMessage();
        Object object = new Object();
        boolean result = logMessage.canEqual(object);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testGetId_WithDefaultConstructor_ShouldReturnNull() throws Throwable {
        LogMessage logMessage = new LogMessage();
        Long id = logMessage.getId();
        assertNull(id);
    }

    @Test(timeout = 4000)
    public void testGetMessage_WithBuilderAndNoMessage_ShouldReturnNull() throws Throwable {
        LogMessage.LogMessageBuilder builder = new LogMessage.LogMessageBuilder();
        LogMessage logMessage = builder.build();
        String message = logMessage.getMessage();
        assertNull(message);
    }

    @Test(timeout = 4000)
    public void testGetDescription_WithDefaultConstructor_ShouldReturnNull() throws Throwable {
        LogMessage logMessage = new LogMessage();
        String description = logMessage.getDescription();
        assertNull(description);
    }

    @Test(timeout = 4000)
    public void testGetDateTime_WithDefaultConstructor_ShouldReturnNull() throws Throwable {
        LogMessage logMessage = new LogMessage();
        LocalDateTime dateTime = logMessage.getDateTime();
        assertNull(dateTime);
    }

    @Test(timeout = 4000)
    public void testEquals_WithDifferentDateTime_ShouldReturnFalse() throws Throwable {
        LogMessage logMessage1 = new LogMessage();
        LogMessage logMessage2 = new LogMessage();
        assertTrue(logMessage2.equals(logMessage1));
        LocalDateTime dateTime = MockLocalDateTime.now();
        logMessage2.setDateTime(dateTime);
        boolean result = logMessage1.equals(logMessage2);
        assertFalse(logMessage2.equals(logMessage1));
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithDifferentDescription_ShouldReturnFalse() throws Throwable {
        ZoneOffset zoneOffset = ZoneOffset.MAX;
        LocalDateTime dateTime = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset);
        LogMessage logMessage1 = new LogMessage();
        logMessage1.setMessage("");
        logMessage1.setDescription("");
        LogMessage logMessage2 = new LogMessage(null, "", null, dateTime);
        assertEquals("LogMessage(id=null, message=, description=null, dateTime=1970-01-01T18:00)", logMessage2.toString());
        logMessage2.setDescription("");
        boolean result = logMessage2.equals(logMessage1);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithSameProperties_ShouldReturnTrue() throws Throwable {
        ZoneOffset zoneOffset = ZoneOffset.MAX;
        LocalDateTime dateTime = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset);
        LogMessage logMessage1 = new LogMessage();
        logMessage1.setMessage("");
        logMessage1.setDateTime(dateTime);
        logMessage1.setDescription("");
        LogMessage logMessage2 = new LogMessage(null, "", "", dateTime);
        boolean result = logMessage2.equals(logMessage1);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithDifferentId_ShouldReturnFalse() throws Throwable {
        LogMessage logMessage1 = new LogMessage();
        LogMessage logMessage2 = new LogMessage();
        assertTrue(logMessage2.equals(logMessage1));
        Long id = 0L;
        logMessage2.setId(id);
        boolean result = logMessage1.equals(logMessage2);
        assertFalse(logMessage2.equals(logMessage1));
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithSameId_ShouldReturnTrue() throws Throwable {
        LogMessage logMessage1 = new LogMessage();
        Long id = 0L;
        logMessage1.setId(id);
        LogMessage logMessage2 = new LogMessage();
        logMessage2.setId(id);
        boolean result = logMessage1.equals(logMessage2);
        assertTrue(logMessage2.equals(logMessage1));
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithNullObject_ShouldReturnFalse() throws Throwable {
        LogMessage logMessage = new LogMessage();
        ZoneOffset zoneOffset = ZoneOffset.MAX;
        boolean result = logMessage.equals(zoneOffset);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        LogMessage logMessage = new LogMessage();
        boolean result = logMessage.equals(logMessage);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testHashCode_WithBuilder_ShouldNotThrowException() throws Throwable {
        LogMessage.LogMessageBuilder builder = new LogMessage.LogMessageBuilder();
        LogMessage logMessage = builder.build();
        logMessage.hashCode();
    }

    @Test(timeout = 4000)
    public void testHashCode_WithNullId_ShouldNotThrowException() throws Throwable {
        Long id = -1L;
        LocalDateTime dateTime = MockLocalDateTime.now();
        LogMessage logMessage = new LogMessage(id, "#s>5MLR+vY7}EkPi", "", dateTime);
        logMessage.setId(null);
        logMessage.hashCode();
        assertEquals("LogMessage(id=null, message=#s>5MLR+vY7}EkPi, description=, dateTime=2014-02-14T20:21:21.320)", logMessage.toString());
    }

    @Test(timeout = 4000)
    public void testBuilder_WithId_ShouldSetIdCorrectly() throws Throwable {
        LogMessage.LogMessageBuilder builder = LogMessage.builder();
        LogMessage.LogMessageBuilder result = builder.id(null);
        assertSame(builder, result);
    }

    @Test(timeout = 4000)
    public void testBuilder_ToString_ShouldReturnCorrectString() throws Throwable {
        LogMessage.LogMessageBuilder builder = LogMessage.builder();
        String result = builder.toString();
        assertEquals("LogMessage.LogMessageBuilder(id=null, message=null, description=null, dateTime=null)", result);
    }

    @Test(timeout = 4000)
    public void testBuilder_WithDescription_ShouldSetDescriptionCorrectly() throws Throwable {
        LogMessage.LogMessageBuilder builder = LogMessage.builder();
        builder.description("");
        LogMessage logMessage = builder.build();
        logMessage.getDescription();
        assertEquals("LogMessage(id=null, message=null, description=, dateTime=null)", logMessage.toString());
    }

    @Test(timeout = 4000)
    public void testBuilder_WithDateTime_ShouldSetDateTimeCorrectly() throws Throwable {
        LogMessage.LogMessageBuilder builder = LogMessage.builder();
        LogMessage.LogMessageBuilder result = builder.dateTime(null);
        assertSame(builder, result);
    }

    @Test(timeout = 4000)
    public void testToString_WithDefaultConstructor_ShouldReturnCorrectString() throws Throwable {
        LogMessage logMessage = new LogMessage();
        String result = logMessage.toString();
        assertEquals("LogMessage(id=null, message=null, description=null, dateTime=null)", result);
    }

    @Test(timeout = 4000)
    public void testBuilder_WithMessage_ShouldSetMessageCorrectly() throws Throwable {
        LogMessage.LogMessageBuilder builder = LogMessage.builder();
        LogMessage.LogMessageBuilder result = builder.message("com.cbarkinozer.onlinebankingrestapi.app.kafka.dto.LogMessage$LogMessageBuilder");
        assertSame(result, builder);
    }
}