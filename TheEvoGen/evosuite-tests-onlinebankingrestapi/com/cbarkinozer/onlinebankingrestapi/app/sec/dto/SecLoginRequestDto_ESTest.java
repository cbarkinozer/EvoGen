/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:23:48 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.sec.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.sec.dto.SecLoginRequestDto;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SecLoginRequestDto_ESTest extends SecLoginRequestDto_ESTest_scaffolding {

    /**
     * Test setting and getting password with a specific string.
     */
    @Test(timeout = 4000)
    public void testSetPassword_WithSpecificString_ShouldReturnCorrectPassword() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        loginRequestDto.setPassword("SecLoginRequestDto(identityNo=-1, password=null)");
        String password = loginRequestDto.getPassword();
        assertEquals("SecLoginRequestDto(identityNo=-1, password=null)", password);
    }

    /**
     * Test setting and getting password with an empty string.
     */
    @Test(timeout = 4000)
    public void testSetPassword_WithEmptyString_ShouldReturnEmptyString() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        loginRequestDto.setPassword("");
        String password = loginRequestDto.getPassword();
        assertEquals("", password);
    }

    /**
     * Test setting and getting identityNo with a valid value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithValidValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Long identityNo = 0L;
        loginRequestDto.setIdentityNo(identityNo);
        Long retrievedIdentityNo = loginRequestDto.getIdentityNo();
        assertEquals(0L, (long) retrievedIdentityNo);
    }

    /**
     * Test setting and getting identityNo with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithPositiveValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Long identityNo = 1272L;
        loginRequestDto.setIdentityNo(identityNo);
        Long retrievedIdentityNo = loginRequestDto.getIdentityNo();
        assertEquals(1272L, (long) retrievedIdentityNo);
    }

    /**
     * Test setting and getting identityNo with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithNegativeValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Long identityNo = -1L;
        loginRequestDto.setIdentityNo(identityNo);
        Long retrievedIdentityNo = loginRequestDto.getIdentityNo();
        assertEquals(-1L, (long) retrievedIdentityNo);
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        boolean result = loginRequestDto.canEqual(loginRequestDto);
        assertTrue(result);
    }

    /**
     * Test canEqual method with a different object type.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Long differentObject = -1L;
        boolean result = loginRequestDto.canEqual(differentObject);
        assertFalse(result);
    }

    /**
     * Test getting password when it is null.
     */
    @Test(timeout = 4000)
    public void testGetPassword_WhenNull_ShouldReturnNull() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        String password = loginRequestDto.getPassword();
        assertNull(password);
    }

    /**
     * Test getting identityNo when it is null.
     */
    @Test(timeout = 4000)
    public void testGetIdentityNo_WhenNull_ShouldReturnNull() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Long identityNo = loginRequestDto.getIdentityNo();
        assertNull(identityNo);
    }

    /**
     * Test equals method with different password values.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentPasswords_ShouldReturnFalseUntilPasswordsMatch() throws Throwable {
        SecLoginRequestDto loginRequestDto1 = new SecLoginRequestDto();
        SecLoginRequestDto loginRequestDto2 = new SecLoginRequestDto();
        loginRequestDto2.setPassword("lFXU;~xF-Oy#t,g|*");
        assertFalse(loginRequestDto2.equals(loginRequestDto1));
        
        loginRequestDto1.setPassword("lFXU;~xF-Oy#t,g|*");
        boolean result = loginRequestDto2.equals(loginRequestDto1);
        assertTrue(loginRequestDto2.equals(loginRequestDto1));
        assertTrue(result);
    }

    /**
     * Test equals method with different password values, initially null.
     */
    @Test(timeout = 4000)
    public void testEquals_WithInitiallyNullPasswords_ShouldReturnTrueUntilPasswordsDiffer() throws Throwable {
        SecLoginRequestDto loginRequestDto1 = new SecLoginRequestDto();
        SecLoginRequestDto loginRequestDto2 = new SecLoginRequestDto();
        assertTrue(loginRequestDto2.equals(loginRequestDto1));
        
        loginRequestDto2.setPassword("");
        boolean result = loginRequestDto1.equals(loginRequestDto2);
        assertFalse(loginRequestDto2.equals(loginRequestDto1));
        assertFalse(result);
    }

    /**
     * Test equals method when one object has a password and the other does not.
     */
    @Test(timeout = 4000)
    public void testEquals_WhenOneHasPasswordAndOtherDoesNot_ShouldReturnFalse() throws Throwable {
        SecLoginRequestDto loginRequestDto1 = new SecLoginRequestDto();
        loginRequestDto1.setPassword("2!!U5/WFr");
        SecLoginRequestDto loginRequestDto2 = new SecLoginRequestDto();
        boolean result = loginRequestDto1.equals(loginRequestDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with different identityNo values.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentIdentityNos_ShouldReturnFalseUntilIdentityNosMatch() throws Throwable {
        SecLoginRequestDto loginRequestDto1 = new SecLoginRequestDto();
        Long identityNo = 23L;
        loginRequestDto1.setIdentityNo(identityNo);
        SecLoginRequestDto loginRequestDto2 = new SecLoginRequestDto();
        assertFalse(loginRequestDto2.equals(loginRequestDto1));
        
        loginRequestDto2.setIdentityNo(identityNo);
        boolean result = loginRequestDto2.equals(loginRequestDto1);
        assertTrue(loginRequestDto2.equals(loginRequestDto1));
        assertTrue(result);
    }

    /**
     * Test equals method with different identityNo values, initially null.
     */
    @Test(timeout = 4000)
    public void testEquals_WithInitiallyNullIdentityNos_ShouldReturnTrueUntilIdentityNosDiffer() throws Throwable {
        SecLoginRequestDto loginRequestDto1 = new SecLoginRequestDto();
        SecLoginRequestDto loginRequestDto2 = new SecLoginRequestDto();
        assertTrue(loginRequestDto2.equals(loginRequestDto1));
        
        Long identityNo = -249L;
        loginRequestDto2.setIdentityNo(identityNo);
        boolean result = loginRequestDto1.equals(loginRequestDto2);
        assertFalse(loginRequestDto2.equals(loginRequestDto1));
        assertFalse(result);
    }

    /**
     * Test equals method when one object has identityNo and the other does not.
     */
    @Test(timeout = 4000)
    public void testEquals_WhenOneHasIdentityNoAndOtherDoesNot_ShouldReturnFalse() throws Throwable {
        SecLoginRequestDto loginRequestDto1 = new SecLoginRequestDto();
        Long identityNo = -1714L;
        SecLoginRequestDto loginRequestDto2 = new SecLoginRequestDto();
        assertTrue(loginRequestDto2.equals(loginRequestDto1));
        
        loginRequestDto2.setIdentityNo(identityNo);
        boolean result = loginRequestDto2.equals(loginRequestDto1);
        assertFalse(loginRequestDto2.equals(loginRequestDto1));
        assertFalse(result);
    }

    /**
     * Test equals method with a completely different object type.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Object differentObject = new Object();
        boolean result = loginRequestDto.equals(differentObject);
        assertFalse(result);
    }

    /**
     * Test equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        boolean result = loginRequestDto.equals(loginRequestDto);
        assertTrue(result);
    }

    /**
     * Test hashCode method without setting any fields.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithoutSettingFields_ShouldNotThrow() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        loginRequestDto.hashCode();
    }

    /**
     * Test hashCode method after setting identityNo.
     */
    @Test(timeout = 4000)
    public void testHashCode_AfterSettingIdentityNo_ShouldNotThrow() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        Long identityNo = 0L;
        loginRequestDto.setIdentityNo(identityNo);
        loginRequestDto.hashCode();
    }

    /**
     * Test hashCode method after setting password.
     */
    @Test(timeout = 4000)
    public void testHashCode_AfterSettingPassword_ShouldNotThrow() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        loginRequestDto.setPassword("");
        loginRequestDto.hashCode();
    }

    /**
     * Test toString method without setting any fields.
     */
    @Test(timeout = 4000)
    public void testToString_WithoutSettingFields_ShouldReturnDefaultString() throws Throwable {
        SecLoginRequestDto loginRequestDto = new SecLoginRequestDto();
        String result = loginRequestDto.toString();
        assertEquals("SecLoginRequestDto(identityNo=null, password=null)", result);
    }
}