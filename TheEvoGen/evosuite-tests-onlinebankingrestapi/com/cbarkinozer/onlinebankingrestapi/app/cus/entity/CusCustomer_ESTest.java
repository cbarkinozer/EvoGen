/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:14:46 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.cus.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.cus.entity.CusCustomer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CusCustomer_ESTest extends CusCustomer_ESTest_scaffolding {

    /**
     * Test setting and getting surname.
     */
    @Test(timeout = 4000)
    public void testSetSurname_WithValidSurname_ShouldReturnCorrectSurname() throws Throwable {
        CusCustomer customer = new CusCustomer();
        customer.setSurname("=S{(.$6VZ.OC0}bL(iH");
        String surname = customer.getSurname();
        assertEquals("=S{(.$6VZ.OC0}bL(iH", surname);
    }

    /**
     * Test setting and getting password with empty string.
     */
    @Test(timeout = 4000)
    public void testSetPassword_WithEmptyString_ShouldReturnEmptyString() throws Throwable {
        CusCustomer customer = new CusCustomer();
        customer.setPassword("");
        String password = customer.getPassword();
        assertEquals("", password);
    }

    /**
     * Test setting and getting name with valid input.
     */
    @Test(timeout = 4000)
    public void testSetName_WithValidName_ShouldReturnCorrectName() throws Throwable {
        CusCustomer customer = new CusCustomer();
        customer.setName("oPr{[T+]Gdg}-v>s'yB");
        String name = customer.getName();
        assertEquals("oPr{[T+]Gdg}-v>s'yB", name);
    }

    /**
     * Test setting and getting name with empty string.
     */
    @Test(timeout = 4000)
    public void testSetName_WithEmptyString_ShouldReturnEmptyString() throws Throwable {
        CusCustomer customer = new CusCustomer();
        customer.setName("");
        String name = customer.getName();
        assertEquals("", name);
    }

    /**
     * Test setting and getting identity number with zero.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithZero_ShouldReturnZero() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long identityNo = 0L;
        customer.setIdentityNo(identityNo);
        Long retrievedIdentityNo = customer.getIdentityNo();
        assertEquals(0L, (long) retrievedIdentityNo);
    }

    /**
     * Test setting and getting identity number with a positive number.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithPositiveNumber_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long identityNo = 3246L;
        customer.setIdentityNo(identityNo);
        Long retrievedIdentityNo = customer.getIdentityNo();
        assertEquals(3246L, (long) retrievedIdentityNo);
    }

    /**
     * Test setting and getting id with a positive number.
     */
    @Test(timeout = 4000)
    public void testSetId_WithPositiveNumber_ShouldReturnCorrectId() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long id = 320L;
        customer.setId(id);
        Long retrievedId = customer.getId();
        assertEquals(320L, (long) retrievedId);
    }

    /**
     * Test setting and getting id with a negative number.
     */
    @Test(timeout = 4000)
    public void testSetId_WithNegativeNumber_ShouldReturnCorrectId() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long id = -1L;
        customer.setId(id);
        Long retrievedId = customer.getId();
        assertEquals(-1L, (long) retrievedId);
    }

    /**
     * Test setting and getting identity number with a negative number.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithNegativeNumber_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long identityNo = -5306L;
        customer.setIdentityNo(identityNo);
        Long retrievedIdentityNo = customer.getIdentityNo();
        assertEquals(-5306L, (long) retrievedIdentityNo);
    }

    /**
     * Test setting and getting surname with empty string.
     */
    @Test(timeout = 4000)
    public void testSetSurname_WithEmptyString_ShouldReturnEmptyString() throws Throwable {
        CusCustomer customer = new CusCustomer();
        customer.setSurname("");
        String surname = customer.getSurname();
        assertEquals("", surname);
    }

    /**
     * Test getting identity number when not set.
     */
    @Test(timeout = 4000)
    public void testGetIdentityNo_WhenNotSet_ShouldReturnNull() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long identityNo = customer.getIdentityNo();
        assertNull(identityNo);
    }

    /**
     * Test getting password when not set.
     */
    @Test(timeout = 4000)
    public void testGetPassword_WhenNotSet_ShouldReturnNull() throws Throwable {
        CusCustomer customer = new CusCustomer();
        String password = customer.getPassword();
        assertNull(password);
    }

    /**
     * Test getting name when not set.
     */
    @Test(timeout = 4000)
    public void testGetName_WhenNotSet_ShouldReturnNull() throws Throwable {
        CusCustomer customer = new CusCustomer();
        String name = customer.getName();
        assertNull(name);
    }

    /**
     * Test getting id when not set.
     */
    @Test(timeout = 4000)
    public void testGetId_WhenNotSet_ShouldReturnNull() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long id = customer.getId();
        assertNull(id);
    }

    /**
     * Test setting and getting password with valid input.
     */
    @Test(timeout = 4000)
    public void testSetPassword_WithValidPassword_ShouldReturnCorrectPassword() throws Throwable {
        CusCustomer customer = new CusCustomer();
        customer.setPassword("fsPgkx");
        String password = customer.getPassword();
        assertEquals("fsPgkx", password);
    }

    /**
     * Test getting surname when not set.
     */
    @Test(timeout = 4000)
    public void testGetSurname_WhenNotSet_ShouldReturnNull() throws Throwable {
        CusCustomer customer = new CusCustomer();
        String surname = customer.getSurname();
        assertNull(surname);
    }

    /**
     * Test setting and getting id with zero.
     */
    @Test(timeout = 4000)
    public void testSetId_WithZero_ShouldReturnZero() throws Throwable {
        CusCustomer customer = new CusCustomer();
        Long id = 0L;
        customer.setId(id);
        Long retrievedId = customer.getId();
        assertEquals(0L, (long) retrievedId);
    }
}