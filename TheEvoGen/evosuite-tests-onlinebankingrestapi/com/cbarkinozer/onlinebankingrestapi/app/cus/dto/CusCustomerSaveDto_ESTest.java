/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:15:18 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.cus.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CusCustomerSaveDto_ESTest extends CusCustomerSaveDto_ESTest_scaffolding {

    /**
     * Test setting and getting surname.
     */
    @Test(timeout = 4000)
    public void testSetSurname_WithValidSurname_ShouldReturnCorrectSurname() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setSurname("ValidSurname");
        String surname = customer.getSurname();
        assertEquals("ValidSurname", surname);
    }

    /**
     * Test setting and getting an empty surname.
     */
    @Test(timeout = 4000)
    public void testSetSurname_WithEmptySurname_ShouldReturnEmptySurname() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setSurname("");
        String surname = customer.getSurname();
        assertEquals("", surname);
    }

    /**
     * Test setting and getting password.
     */
    @Test(timeout = 4000)
    public void testSetPassword_WithValidPassword_ShouldReturnCorrectPassword() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setPassword("'T!Qu~5eQk+3A2!TK+_");
        String password = customer.getPassword();
        assertEquals("'T!Qu~5eQk+3A2!TK+_", password);
    }

    /**
     * Test setting and getting an empty password.
     */
    @Test(timeout = 4000)
    public void testSetPassword_WithEmptyPassword_ShouldReturnEmptyPassword() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setPassword("");
        String password = customer.getPassword();
        assertEquals("", password);
    }

    /**
     * Test setting and getting name.
     */
    @Test(timeout = 4000)
    public void testSetName_WithValidName_ShouldReturnCorrectName() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setName("K;FAMhQ4Pw");
        String name = customer.getName();
        assertEquals("K;FAMhQ4Pw", name);
    }

    /**
     * Test setting and getting an empty name.
     */
    @Test(timeout = 4000)
    public void testSetName_WithEmptyName_ShouldReturnEmptyName() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setName("");
        String name = customer.getName();
        assertEquals("", name);
    }

    /**
     * Test setting and getting identity number with zero value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithZeroValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        Long identityNo = 0L;
        customer.setIdentityNo(identityNo);
        Long resultIdentityNo = customer.getIdentityNo();
        assertEquals(0L, (long) resultIdentityNo);
    }

    /**
     * Test setting and getting identity number with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithPositiveValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        Long identityNo = 775L;
        customer.setIdentityNo(identityNo);
        Long resultIdentityNo = customer.getIdentityNo();
        assertEquals(775L, (long) resultIdentityNo);
    }

    /**
     * Test setting and getting identity number with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithNegativeValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        Long identityNo = -2999L;
        customer.setIdentityNo(identityNo);
        Long resultIdentityNo = customer.getIdentityNo();
        assertEquals(-2999L, (long) resultIdentityNo);
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        boolean result = customer.canEqual(customer);
        assertTrue(result);
    }

    /**
     * Test canEqual method with a different object type.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        Object obj = new Object();
        boolean result = customer.canEqual(obj);
        assertFalse(result);
    }

    /**
     * Test getting password when it is null.
     */
    @Test(timeout = 4000)
    public void testGetPassword_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        String password = customer.getPassword();
        assertNull(password);
    }

    /**
     * Test getting identity number when it is null.
     */
    @Test(timeout = 4000)
    public void testGetIdentityNo_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        Long identityNo = customer.getIdentityNo();
        assertNull(identityNo);
    }

    /**
     * Test getting surname when it is null.
     */
    @Test(timeout = 4000)
    public void testGetSurname_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        String surname = customer.getSurname();
        assertNull(surname);
    }

    /**
     * Test getting name when it is null.
     */
    @Test(timeout = 4000)
    public void testGetName_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        String name = customer.getName();
        assertNull(name);
    }

    /**
     * Test equals method with the same password.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSamePassword_ShouldReturnTrue() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setPassword("password");
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setPassword("password");
        boolean result = customer1.equals(customer2);
        assertTrue(result);
    }

    /**
     * Test equals method with different passwords.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentPasswords_ShouldReturnFalse() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setPassword("password1");
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setPassword("password2");
        boolean result = customer1.equals(customer2);
        assertFalse(result);
    }

    /**
     * Test equals method with the same surname.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameSurname_ShouldReturnTrue() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setSurname("surname");
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setSurname("surname");
        boolean result = customer1.equals(customer2);
        assertTrue(result);
    }

    /**
     * Test equals method with different surnames.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentSurnames_ShouldReturnFalse() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setSurname("surname1");
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setSurname("surname2");
        boolean result = customer1.equals(customer2);
        assertFalse(result);
    }

    /**
     * Test equals method with different names.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentNames_ShouldReturnFalse() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setName("name1");
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setName("name2");
        boolean result = customer1.equals(customer2);
        assertFalse(result);
    }

    /**
     * Test equals method with the same identity number.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameIdentityNo_ShouldReturnTrue() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setIdentityNo(1L);
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setIdentityNo(1L);
        boolean result = customer1.equals(customer2);
        assertTrue(result);
    }

    /**
     * Test equals method with different identity numbers.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentIdentityNos_ShouldReturnFalse() throws Throwable {
        CusCustomerSaveDto customer1 = new CusCustomerSaveDto();
        customer1.setIdentityNo(1L);
        CusCustomerSaveDto customer2 = new CusCustomerSaveDto();
        customer2.setIdentityNo(2L);
        boolean result = customer1.equals(customer2);
        assertFalse(result);
    }

    /**
     * Test equals method with a non-CusCustomerSaveDto object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithNonCusCustomerSaveDtoObject_ShouldReturnFalse() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        boolean result = customer.equals("nonCusCustomerSaveDto");
        assertFalse(result);
    }

    /**
     * Test equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        boolean result = customer.equals(customer);
        assertTrue(result);
    }

    /**
     * Test hashCode method.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithVariousFields_ShouldNotThrowException() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        customer.setPassword("");
        customer.hashCode();
        customer.setSurname("");
        customer.hashCode();
        customer.setName("");
        customer.hashCode();
        customer.setIdentityNo(-2999L);
        customer.hashCode();
    }

    /**
     * Test toString method.
     */
    @Test(timeout = 4000)
    public void testToString_WhenFieldsAreNull_ShouldReturnCorrectString() throws Throwable {
        CusCustomerSaveDto customer = new CusCustomerSaveDto();
        String result = customer.toString();
        assertEquals("CusCustomerSaveDto(name=null, surname=null, identityNo=null, password=null)", result);
    }
}