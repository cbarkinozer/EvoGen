/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:15:16 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.cus.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.cus.dto.CusCustomerDto;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CusCustomerDto_ESTest extends CusCustomerDto_ESTest_scaffolding {

    /**
     * Test setting and getting surname.
     */
    @Test(timeout = 4000)
    public void testSetSurname_WithValidValue_ShouldReturnCorrectSurname() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        customer.setSurname("B]]iA");
        String surname = customer.getSurname();
        assertEquals("B]]iA", surname);
    }

    /**
     * Test setting and getting an empty surname.
     */
    @Test(timeout = 4000)
    public void testSetSurname_WithEmptyValue_ShouldReturnEmptySurname() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        customer.setSurname("");
        String surname = customer.getSurname();
        assertEquals("", surname);
    }

    /**
     * Test setting and getting name with a special character string.
     */
    @Test(timeout = 4000)
    public void testSetName_WithSpecialCharacters_ShouldReturnCorrectName() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        customer.setName("}2(A-_UI'BNRrr^t=");
        String name = customer.getName();
        assertEquals("}2(A-_UI'BNRrr^t=", name);
    }

    /**
     * Test setting and getting an empty name.
     */
    @Test(timeout = 4000)
    public void testSetName_WithEmptyValue_ShouldReturnEmptyName() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        customer.setName("");
        String name = customer.getName();
        assertEquals("", name);
    }

    /**
     * Test setting and getting identity number with zero value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithZeroValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long identityNo = Long.valueOf(0L);
        customer.setIdentityNo(identityNo);
        Long resultIdentityNo = customer.getIdentityNo();
        assertNotNull(resultIdentityNo);
        assertEquals("CusCustomerDto(id=null, name=null, surname=null, identityNo=0)", customer.toString());
    }

    /**
     * Test setting identity number with the same value as id.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithSameValueAsId_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long idValue = Long.valueOf(1L);
        customer.id = idValue;
        customer.setIdentityNo(customer.id);
        Long identityNo = customer.getIdentityNo();
        assertEquals(1L, (long) identityNo);
    }

    /**
     * Test setting identity number with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetIdentityNo_WithNegativeValue_ShouldReturnCorrectIdentityNo() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long identityNo = Long.getLong("CusCustomerDto(id=null, name=null, surname=null, identityNo=null)", (-183L));
        customer.setIdentityNo(identityNo);
        Long resultIdentityNo = customer.getIdentityNo();
        assertNotNull(resultIdentityNo);
        assertEquals("CusCustomerDto(id=null, name=null, surname=null, identityNo=-183)", customer.toString());
    }

    /**
     * Test setting id with a null string and default value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithNullStringAndDefaultValue_ShouldReturnCorrectId() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long idValue = Long.getLong((String) null, 0L);
        customer.setId(idValue);
        Long resultId = customer.getId();
        assertNotNull(resultId);
        assertEquals("CusCustomerDto(id=0, name=null, surname=null, identityNo=null)", customer.toString());
    }

    /**
     * Test setting and getting id with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithPositiveValue_ShouldReturnCorrectId() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long idValue = Long.valueOf(1L);
        customer.id = idValue;
        Long resultId = customer.getId();
        assertEquals(1L, (long) resultId);
    }

    /**
     * Test setting and getting id with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetId_WithNegativeValue_ShouldReturnCorrectId() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long idValue = Long.valueOf((-2068L));
        customer.id = idValue;
        Long resultId = customer.getId();
        assertEquals((-2068L), (long) resultId);
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        boolean result = customer.canEqual(customer);
        assertTrue(result);
    }

    /**
     * Test canEqual method with a different object type.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Object obj = new Object();
        boolean result = customer.canEqual(obj);
        assertFalse(result);
    }

    /**
     * Test getting name when it is null.
     */
    @Test(timeout = 4000)
    public void testGetName_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        String name = customer.getName();
        assertNull(name);
    }

    /**
     * Test getting surname when it is null.
     */
    @Test(timeout = 4000)
    public void testGetSurname_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        String surname = customer.getSurname();
        assertNull(surname);
    }

    /**
     * Test getting identity number when it is null.
     */
    @Test(timeout = 4000)
    public void testGetIdentityNo_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long identityNo = customer.getIdentityNo();
        assertNull(identityNo);
    }

    /**
     * Test getting id when it is null.
     */
    @Test(timeout = 4000)
    public void testGetId_WhenNull_ShouldReturnNull() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long id = customer.getId();
        assertNull(id);
    }

    /**
     * Test equals method with two objects having the same surname.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameSurname_ShouldReturnTrue() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        CusCustomerDto customer2 = new CusCustomerDto();
        customer2.setSurname("");
        assertFalse(customer2.equals(customer1));
        customer1.setSurname("");
        boolean result = customer1.equals(customer2);
        assertTrue(customer1.equals(customer2));
        assertTrue(result);
    }

    /**
     * Test equals method with two objects where one has a surname and the other does not.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentSurname_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        CusCustomerDto customer2 = new CusCustomerDto();
        assertTrue(customer2.equals(customer1));
        customer1.setSurname("");
        boolean result = customer2.equals(customer1);
        assertFalse(customer2.equals(customer1));
        assertFalse(result);
    }

    /**
     * Test equals method with two objects where one has a name and the other does not.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentName_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        CusCustomerDto customer2 = new CusCustomerDto();
        assertTrue(customer2.equals(customer1));
        customer1.setName("");
        boolean result = customer2.equals(customer1);
        assertFalse(customer2.equals(customer1));
        assertFalse(result);
    }

    /**
     * Test equals method with two objects having the same name.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameName_ShouldReturnTrue() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        customer1.setName("");
        CusCustomerDto customer2 = new CusCustomerDto();
        assertFalse(customer2.equals(customer1));
        customer2.setName("");
        boolean result = customer1.equals(customer2);
        assertTrue(customer2.equals(customer1));
        assertTrue(result);
    }

    /**
     * Test equals method with identity number.
     */
    @Test(timeout = 4000)
    public void testEquals_WithIdentityNo_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        CusCustomerDto customer2 = new CusCustomerDto();
        Long identityNo = Long.getLong("", (-183L));
        customer2.setIdentityNo(identityNo);
        boolean result = customer1.equals(customer2);
        assertEquals("CusCustomerDto(id=null, name=null, surname=null, identityNo=-183)", customer2.toString());
        assertFalse(result);
    }

    /**
     * Test equals method with the same id.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameId_ShouldReturnTrue() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        Long idValue = Long.valueOf(0L);
        customer1.setId(idValue);
        CusCustomerDto customer2 = new CusCustomerDto();
        customer2.id = idValue;
        boolean result = customer1.equals(customer2);
        assertEquals("CusCustomerDto(id=0, name=null, surname=null, identityNo=null)", customer2.toString());
        assertTrue(result);
    }

    /**
     * Test equals method with different id.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentId_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        CusCustomerDto customer2 = new CusCustomerDto();
        Long idValue = Long.valueOf((-40L));
        customer2.setId(idValue);
        boolean result = customer1.equals(customer2);
        assertEquals("CusCustomerDto(id=-40, name=null, surname=null, identityNo=null)", customer2.toString());
        assertFalse(result);
    }

    /**
     * Test equals method with an incompatible object type.
     */
    @Test(timeout = 4000)
    public void testEquals_WithIncompatibleObjectType_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long idValue = customer.id;
        boolean result = customer.equals(idValue);
        assertFalse(result);
    }

    /**
     * Test equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        boolean result = customer.equals(customer);
        assertTrue(result);
    }

    /**
     * Test hashCode method.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithDefaultValues_ShouldNotThrowException() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        customer.setName("CusCustomerDto(id=null, name=null, surname=null, identityNo=null)");
        customer.hashCode();
    }

    /**
     * Test hashCode method with identity number set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithIdentityNoSet_ShouldNotThrowException() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long identityNo = Long.valueOf(2244L);
        customer.setIdentityNo(identityNo);
        customer.hashCode();
        assertEquals("CusCustomerDto(id=null, name=null, surname=null, identityNo=2244)", customer.toString());
    }

    /**
     * Test hashCode method with id set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithIdSet_ShouldNotThrowException() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        Long idValue = Long.valueOf(2244L);
        customer.id = idValue;
        customer.hashCode();
        assertEquals("CusCustomerDto(id=2244, name=null, surname=null, identityNo=null)", customer.toString());
    }

    /**
     * Test hashCode method with surname set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithSurnameSet_ShouldNotThrowException() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        customer.setSurname("");
        customer.hashCode();
    }

    /**
     * Test toString method with default values.
     */
    @Test(timeout = 4000)
    public void testToString_WithDefaultValues_ShouldReturnCorrectString() throws Throwable {
        CusCustomerDto customer = new CusCustomerDto();
        String result = customer.toString();
        assertEquals("CusCustomerDto(id=null, name=null, surname=null, identityNo=null)", result);
    }

    /**
     * Test equals method with the same identity number.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameIdentityNo_ShouldReturnTrue() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        Long identityNo = Long.valueOf(481L);
        customer1.setIdentityNo(identityNo);
        CusCustomerDto customer2 = new CusCustomerDto();
        customer2.setIdentityNo(identityNo);
        boolean result = customer1.equals(customer2);
        assertEquals("CusCustomerDto(id=null, name=null, surname=null, identityNo=481)", customer2.toString());
        assertTrue(result);
    }

    /**
     * Test equals method with different id.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentIdValue_ShouldReturnFalse() throws Throwable {
        CusCustomerDto customer1 = new CusCustomerDto();
        Long idValue = Long.valueOf(0L);
        customer1.setId(idValue);
        CusCustomerDto customer2 = new CusCustomerDto();
        boolean result = customer1.equals(customer2);
        assertEquals("CusCustomerDto(id=0, name=null, surname=null, identityNo=null)", customer1.toString());
        assertFalse(result);
    }
}