/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:07:35 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.acc.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.acc.entity.AccAccountActivity;
import com.cbarkinozer.onlinebankingrestapi.app.acc.enums.AccAccountActivityType;
import java.math.BigDecimal;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccAccountActivity_ESTest extends AccAccountActivity_ESTest_scaffolding {

    @Test(timeout = 4000)
    /**
     * Test setting and getting transaction date.
     */
    public void testSetTransactionDate_WithValidDate_ShouldReturnSameDate() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        LocalDate transactionDate = LocalDate.now();
        accountActivity.setTransactionDate(transactionDate);
        LocalDate retrievedDate = accountActivity.getTransactionDate();
        assertSame(retrievedDate, transactionDate);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting id.
     */
    public void testSetId_WithZeroValue_ShouldReturnZero() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long id = 0L;
        accountActivity.setId(id);
        Long retrievedId = accountActivity.getId();
        assertEquals(0L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting id with a positive value.
     */
    public void testSetId_WithPositiveValue_ShouldReturnSameValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long id = 2021L;
        accountActivity.setId(id);
        Long retrievedId = accountActivity.getId();
        assertEquals(2021L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting current balance.
     */
    public void testSetCurrentBalance_WithValidBigDecimal_ShouldReturnSameBigDecimal() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal currentBalance = new BigDecimal("0");
        accountActivity.setCurrentBalance(currentBalance);
        BigDecimal retrievedBalance = accountActivity.getCurrentBalance();
        assertSame(retrievedBalance, currentBalance);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting current balance with a negative value.
     */
    public void testSetCurrentBalance_WithNegativeValue_ShouldReturnSameValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal currentBalance = new BigDecimal("-1960");
        accountActivity.setCurrentBalance(currentBalance);
        BigDecimal retrievedBalance = accountActivity.getCurrentBalance();
        assertSame(retrievedBalance, currentBalance);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting current balance with a positive value.
     */
    public void testSetCurrentBalance_WithPositiveValue_ShouldReturnCorrectShortValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal currentBalance = new BigDecimal("2688");
        accountActivity.setCurrentBalance(currentBalance);
        BigDecimal retrievedBalance = accountActivity.getCurrentBalance();
        assertEquals((short) 2688, retrievedBalance.shortValue());
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount.
     */
    public void testSetAmount_WithZeroValue_ShouldReturnSameValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal amount = BigDecimal.ZERO;
        accountActivity.setAmount(amount);
        BigDecimal retrievedAmount = accountActivity.getAmount();
        assertSame(retrievedAmount, amount);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount with a positive value.
     */
    public void testSetAmount_WithPositiveValue_ShouldReturnCorrectByteValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal amount = BigDecimal.TEN;
        accountActivity.setAmount(amount);
        BigDecimal retrievedAmount = accountActivity.getAmount();
        assertEquals((byte) 10, retrievedAmount.byteValue());
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount with a negative value.
     */
    public void testSetAmount_WithNegativeValue_ShouldReturnCorrectByteValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal amount = BigDecimal.ONE.negate();
        accountActivity.setAmount(amount);
        BigDecimal retrievedAmount = accountActivity.getAmount();
        assertEquals((byte) (-1), retrievedAmount.byteValue());
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting account id.
     */
    public void testSetAccountId_WithZeroValue_ShouldReturnZero() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long accountId = 0L;
        accountActivity.setAccountId(accountId);
        Long retrievedAccountId = accountActivity.getAccountId();
        assertEquals(0L, (long) retrievedAccountId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting account id with a positive value.
     */
    public void testSetAccountId_WithPositiveValue_ShouldReturnSameValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long accountId = 30L;
        accountActivity.setAccountId(accountId);
        Long retrievedAccountId = accountActivity.getAccountId();
        assertEquals(30L, (long) retrievedAccountId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting account id with a negative value.
     */
    public void testSetAccountId_WithNegativeValue_ShouldReturnSameValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long accountId = -2914L;
        accountActivity.setAccountId(accountId);
        Long retrievedAccountId = accountActivity.getAccountId();
        assertEquals(-2914L, (long) retrievedAccountId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting account activity type.
     */
    public void testSetAccountActivityType_WithValidType_ShouldReturnSameType() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        AccAccountActivityType activityType = AccAccountActivityType.GET;
        accountActivity.setAccountActivityType(activityType);
        AccAccountActivityType retrievedType = accountActivity.getAccountActivityType();
        assertSame(retrievedType, activityType);
    }

    @Test(timeout = 4000)
    /**
     * Test getting amount when not set.
     */
    public void testGetAmount_WhenNotSet_ShouldReturnNull() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal amount = accountActivity.getAmount();
        assertNull(amount);
    }

    @Test(timeout = 4000)
    /**
     * Test getting id when not set.
     */
    public void testGetId_WhenNotSet_ShouldReturnNull() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long id = accountActivity.getId();
        assertNull(id);
    }

    @Test(timeout = 4000)
    /**
     * Test getting transaction date when not set.
     */
    public void testGetTransactionDate_WhenNotSet_ShouldReturnNull() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        LocalDate transactionDate = accountActivity.getTransactionDate();
        assertNull(transactionDate);
    }

    @Test(timeout = 4000)
    /**
     * Test getting account activity type when not set.
     */
    public void testGetAccountActivityType_WhenNotSet() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        accountActivity.getAccountActivityType();
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting id with a negative value.
     */
    public void testSetId_WithNegativeValue_ShouldReturnSameValue() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long id = -2914L;
        accountActivity.setId(id);
        Long retrievedId = accountActivity.getId();
        assertEquals(-2914L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    /**
     * Test getting current balance when not set.
     */
    public void testGetCurrentBalance_WhenNotSet_ShouldReturnNull() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        BigDecimal currentBalance = accountActivity.getCurrentBalance();
        assertNull(currentBalance);
    }

    @Test(timeout = 4000)
    /**
     * Test getting account id when not set.
     */
    public void testGetAccountId_WhenNotSet_ShouldReturnNull() throws Throwable {
        AccAccountActivity accountActivity = new AccAccountActivity();
        Long accountId = accountActivity.getAccountId();
        assertNull(accountId);
    }
}