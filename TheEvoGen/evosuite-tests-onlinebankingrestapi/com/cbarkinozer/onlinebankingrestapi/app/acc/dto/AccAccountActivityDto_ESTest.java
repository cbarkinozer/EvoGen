/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:05:54 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.acc.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.acc.dto.AccAccountActivityDto;
import com.cbarkinozer.onlinebankingrestapi.app.acc.enums.AccAccountActivityType;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccAccountActivityDto_ESTest extends AccAccountActivityDto_ESTest_scaffolding {

    /**
     * Test setting and getting transaction date.
     */
    @Test(timeout = 4000)
    public void testSetTransactionDate_GetTransactionDate_ShouldReturnCorrectDate() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        LocalDate transactionDate = MockLocalDate.now();
        activityDto.setTransactionDate(transactionDate);
        LocalDate result = activityDto.getTransactionDate();
        assertSame(result, transactionDate);
    }

    /**
     * Test setting and getting current balance with zero value.
     */
    @Test(timeout = 4000)
    public void testSetCurrentBalance_GetCurrentBalance_WithZeroValue_ShouldReturnCorrectBalance() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal currentBalance = new BigDecimal((long) 0);
        activityDto.setCurrentBalance(currentBalance);
        BigDecimal result = activityDto.getCurrentBalance();
        assertEquals((short) 0, result.shortValue());
    }

    /**
     * Test setting and getting current balance with positive value.
     */
    @Test(timeout = 4000)
    public void testSetCurrentBalance_GetCurrentBalance_WithPositiveValue_ShouldReturnCorrectBalance() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal currentBalance = BigDecimal.TEN;
        activityDto.setCurrentBalance(currentBalance);
        BigDecimal result = activityDto.getCurrentBalance();
        assertEquals((byte) 10, result.byteValue());
    }

    /**
     * Test setting and getting current balance with negative value.
     */
    @Test(timeout = 4000)
    public void testSetCurrentBalance_GetCurrentBalance_WithNegativeValue_ShouldReturnCorrectBalance() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal currentBalance = new BigDecimal((-1633));
        activityDto.setCurrentBalance(currentBalance);
        BigDecimal result = activityDto.getCurrentBalance();
        assertEquals((byte) (-97), result.byteValue());
    }

    /**
     * Test setting and getting amount with zero value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_GetAmount_WithZeroValue_ShouldReturnCorrectAmount() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal amount = new BigDecimal((double) 0L);
        activityDto.setAmount(amount);
        BigDecimal result = activityDto.getAmount();
        assertEquals((byte) 0, result.byteValue());
    }

    /**
     * Test setting and getting amount with positive value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_GetAmount_WithPositiveValue_ShouldReturnCorrectAmount() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal amount = BigDecimal.TEN;
        activityDto.setAmount(amount);
        BigDecimal result = activityDto.getAmount();
        assertEquals((byte) 10, result.byteValue());
    }

    /**
     * Test setting and getting amount with negative value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_GetAmount_WithNegativeValue_ShouldReturnSameAmount() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal amount = new BigDecimal((-1633));
        activityDto.setAmount(amount);
        BigDecimal result = activityDto.getAmount();
        assertSame(result, amount);
    }

    /**
     * Test setting and getting account ID with zero value.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_GetAccountId_WithZeroValue_ShouldReturnCorrectId() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Long accountId = new Long(0L);
        activityDto.setAccountId(accountId);
        Long result = activityDto.getAccountId();
        assertEquals(0L, (long) result);
    }

    /**
     * Test setting and getting account ID with positive value.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_GetAccountId_WithPositiveValue_ShouldReturnCorrectId() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Long accountId = new Long(785L);
        activityDto.setAccountId(accountId);
        Long result = activityDto.getAccountId();
        assertEquals(785L, (long) result);
    }

    /**
     * Test setting and getting account ID with negative value.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_GetAccountId_WithNegativeValue_ShouldReturnCorrectId() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Long accountId = new Long((-24));
        activityDto.setAccountId(accountId);
        Long result = activityDto.getAccountId();
        assertEquals((-24L), (long) result);
    }

    /**
     * Test setting and getting account activity type.
     */
    @Test(timeout = 4000)
    public void testSetAccountActivityType_GetAccountActivityType_ShouldReturnCorrectType() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        AccAccountActivityType activityType = AccAccountActivityType.SEND;
        activityDto.setAccountActivityType(activityType);
        AccAccountActivityType result = activityDto.getAccountActivityType();
        assertSame(result, activityType);
    }

    /**
     * Test canEqual method with same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        boolean result = activityDto.canEqual(activityDto);
        assertTrue(result);
    }

    /**
     * Test canEqual method with different object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObject_ShouldReturnFalse() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Object obj = new Object();
        boolean result = activityDto.canEqual(obj);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testGetAccountActivityType_ShouldNotThrowException() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        activityDto.getAccountActivityType();
    }

    /**
     * Test getting amount when it is null.
     */
    @Test(timeout = 4000)
    public void testGetAmount_WhenNull_ShouldReturnNull() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal result = activityDto.getAmount();
        assertNull(result);
    }

    /**
     * Test getting account ID when it is null.
     */
    @Test(timeout = 4000)
    public void testGetAccountId_WhenNull_ShouldReturnNull() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Long result = activityDto.getAccountId();
        assertNull(result);
    }

    /**
     * Test getting transaction date when it is null.
     */
    @Test(timeout = 4000)
    public void testGetTransactionDate_WhenNull_ShouldReturnNull() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        LocalDate result = activityDto.getTransactionDate();
        assertNull(result);
    }

    /**
     * Test getting current balance when it is null.
     */
    @Test(timeout = 4000)
    public void testGetCurrentBalance_WhenNull_ShouldReturnNull() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal result = activityDto.getCurrentBalance();
        assertNull(result);
    }

    // ... other tests ...

    /**
     * Test equals method with different class object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentClassObject_ShouldReturnFalse() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE;
        boolean result = activityDto.equals(formatter);
        assertFalse(result);
    }

    /**
     * Test equals method with same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        boolean result = activityDto.equals(activityDto);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testHashCode_ShouldNotThrowException() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        AccAccountActivityType activityType = AccAccountActivityType.GET;
        activityDto.setAccountActivityType(activityType);
        activityDto.hashCode();
    }

    @Test(timeout = 4000)
    public void testHashCode_WithTransactionDate_ShouldNotThrowException() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Month month = Month.DECEMBER;
        LocalDate date = MockLocalDate.of(1, month, 1);
        activityDto.setTransactionDate(date);
        activityDto.hashCode();
    }

    @Test(timeout = 4000)
    public void testHashCode_WithAmount_ShouldNotThrowException() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal amount = BigDecimal.ZERO;
        activityDto.setAmount(amount);
        activityDto.hashCode();
    }

    /**
     * Test toString method when all fields are null.
     */
    @Test(timeout = 4000)
    public void testToString_WhenAllFieldsAreNull_ShouldReturnCorrectString() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        String result = activityDto.toString();
        assertEquals("AccAccountActivityDto(accountId=null, amount=null, transactionDate=null, currentBalance=null, accountActivityType=null)", result);
    }

    @Test(timeout = 4000)
    public void testHashCode_WithCurrentBalance_ShouldNotThrowException() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        BigDecimal currentBalance = BigDecimal.TEN;
        activityDto.setCurrentBalance(currentBalance);
        activityDto.hashCode();
    }

    @Test(timeout = 4000)
    public void testHashCode_WithAccountId_ShouldNotThrowException() throws Throwable {
        AccAccountActivityDto activityDto = new AccAccountActivityDto();
        Long accountId = new Long(0L);
        activityDto.setAccountId(accountId);
        activityDto.hashCode();
    }
}