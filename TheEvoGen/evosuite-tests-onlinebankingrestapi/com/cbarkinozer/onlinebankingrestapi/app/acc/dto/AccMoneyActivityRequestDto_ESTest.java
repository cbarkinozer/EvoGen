/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:07:10 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.acc.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.acc.dto.AccMoneyActivityRequestDto;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccMoneyActivityRequestDto_ESTest extends AccMoneyActivityRequestDto_ESTest_scaffolding {

    /**
     * Test setting and getting amount with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_WithNegativeValue_ShouldReturnCorrectShortValue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigDecimal amount = BigDecimal.valueOf(-149.11);
        requestDto.setAmount(amount);
        BigDecimal retrievedAmount = requestDto.getAmount();
        assertEquals((short) -149, retrievedAmount.shortValue());
    }

    /**
     * Test setting and getting amount with zero value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_WithZeroValue_ShouldReturnCorrectShortValue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigInteger zero = BigInteger.ZERO;
        BigDecimal amount = new BigDecimal(zero);
        requestDto.setAmount(amount);
        BigDecimal retrievedAmount = requestDto.getAmount();
        assertEquals((short) 0, retrievedAmount.shortValue());
    }

    /**
     * Test setting and getting amount with one value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_WithOneValue_ShouldReturnCorrectShortValue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigDecimal amount = BigDecimal.ONE;
        requestDto.setAmount(amount);
        BigDecimal retrievedAmount = requestDto.getAmount();
        assertEquals((short) 1, retrievedAmount.shortValue());
    }

    /**
     * Test setting and getting amount with a positive long value.
     */
    @Test(timeout = 4000)
    public void testSetAmount_WithPositiveLongValue_ShouldReturnSameObject() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigDecimal amount = new BigDecimal(665L);
        requestDto.setAmount(amount);
        BigDecimal retrievedAmount = requestDto.getAmount();
        assertSame(retrievedAmount, amount);
    }

    /**
     * Test setting and getting accountId with default value.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_WithDefaultValue_ShouldReturnZero() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        Long accountId = Long.getLong("", 0L);
        requestDto.setAccountId(accountId);
        Long retrievedAccountId = requestDto.getAccountId();
        assertEquals(0L, (long) retrievedAccountId);
    }

    /**
     * Test setting and getting accountId with a positive long value.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_WithPositiveLongValue_ShouldReturnCorrectValue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        Long accountId = 1428L;
        requestDto.setAccountId(accountId);
        Long retrievedAccountId = requestDto.getAccountId();
        assertEquals(1428L, (long) retrievedAccountId);
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        boolean result = requestDto.canEqual(requestDto);
        assertTrue(result);
    }

    /**
     * Test canEqual method with null object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithNullObject_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        boolean result = requestDto.canEqual(null);
        assertFalse(result);
    }

    /**
     * Test getting amount when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetAmount_NotSet_ShouldReturnNull() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigDecimal amount = requestDto.getAmount();
        assertNull(amount);
    }

    /**
     * Test getting accountId when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetAccountId_NotSet_ShouldReturnNull() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        Long accountId = requestDto.getAccountId();
        assertNull(accountId);
    }

    /**
     * Test equals method with two objects having the same amount.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameAmount_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityRequestDto requestDto1 = new AccMoneyActivityRequestDto();
        AccMoneyActivityRequestDto requestDto2 = new AccMoneyActivityRequestDto();
        BigDecimal amount = BigDecimal.ZERO;
        requestDto2.setAmount(amount);
        assertFalse(requestDto2.equals(requestDto1));
        
        requestDto1.setAmount(amount);
        boolean result = requestDto2.equals(requestDto1);
        assertTrue(requestDto1.equals(requestDto2));
        assertTrue(result);
    }

    /**
     * Test equals method with an object having amount set and the other not.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentAmount_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityRequestDto requestDto1 = new AccMoneyActivityRequestDto();
        BigDecimal amount = BigDecimal.ZERO;
        requestDto1.setAmount(amount);
        AccMoneyActivityRequestDto requestDto2 = new AccMoneyActivityRequestDto();
        boolean result = requestDto2.equals(requestDto1);
        assertFalse(result);
    }

    /**
     * Test equals method with two objects having different amounts.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentAmounts_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityRequestDto requestDto1 = new AccMoneyActivityRequestDto();
        BigDecimal amount = BigDecimal.ONE;
        requestDto1.setAmount(amount);
        AccMoneyActivityRequestDto requestDto2 = new AccMoneyActivityRequestDto();
        boolean result = requestDto1.equals(requestDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with two objects having the same accountId.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameAccountId_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityRequestDto requestDto1 = new AccMoneyActivityRequestDto();
        Long accountId = 1428L;
        requestDto1.setAccountId(accountId);
        AccMoneyActivityRequestDto requestDto2 = new AccMoneyActivityRequestDto();
        assertFalse(requestDto2.equals(requestDto1));
        
        requestDto2.setAccountId(accountId);
        boolean result = requestDto1.equals(requestDto2);
        assertTrue(requestDto2.equals(requestDto1));
        assertTrue(result);
    }

    /**
     * Test equals method with two objects where one has accountId set and the other not.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentAccountId_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityRequestDto requestDto1 = new AccMoneyActivityRequestDto();
        AccMoneyActivityRequestDto requestDto2 = new AccMoneyActivityRequestDto();
        assertTrue(requestDto2.equals(requestDto1));
        
        Long accountId = 2209L;
        requestDto2.setAccountId(accountId);
        boolean result = requestDto1.equals(requestDto2);
        assertFalse(requestDto2.equals(requestDto1));
        assertFalse(result);
    }

    /**
     * Test equals method with an object having accountId set and the other not.
     */
    @Test(timeout = 4000)
    public void testEquals_WithAccountIdSetAndOtherNot_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityRequestDto requestDto1 = new AccMoneyActivityRequestDto();
        Long accountId = 1428L;
        requestDto1.setAccountId(accountId);
        AccMoneyActivityRequestDto requestDto2 = new AccMoneyActivityRequestDto();
        boolean result = requestDto1.equals(requestDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with an object of different class.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentClass_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigDecimal amount = BigDecimal.ZERO;
        boolean result = requestDto.equals(amount);
        assertFalse(result);
    }

    /**
     * Test equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        boolean result = requestDto.equals(requestDto);
        assertTrue(result);
    }

    /**
     * Test hashCode method with amount set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithAmountSet_ShouldNotThrowException() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        BigDecimal amount = new BigDecimal(-1079);
        requestDto.setAmount(amount);
        requestDto.hashCode();
    }

    /**
     * Test hashCode method without any fields set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithoutFieldsSet_ShouldNotThrowException() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        requestDto.hashCode();
    }

    /**
     * Test hashCode method with accountId set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithAccountIdSet_ShouldNotThrowException() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        Long accountId = 1428L;
        requestDto.setAccountId(accountId);
        requestDto.hashCode();
    }

    /**
     * Test toString method without any fields set.
     */
    @Test(timeout = 4000)
    public void testToString_WithoutFieldsSet_ShouldReturnCorrectString() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        String result = requestDto.toString();
        assertEquals("AccMoneyActivityRequestDto(accountId=null, amount=null)", result);
    }

    /**
     * Test setting and getting accountId with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        AccMoneyActivityRequestDto requestDto = new AccMoneyActivityRequestDto();
        Long accountId = -1L;
        requestDto.setAccountId(accountId);
        Long retrievedAccountId = requestDto.getAccountId();
        assertEquals(-1L, (long) retrievedAccountId);
    }
}