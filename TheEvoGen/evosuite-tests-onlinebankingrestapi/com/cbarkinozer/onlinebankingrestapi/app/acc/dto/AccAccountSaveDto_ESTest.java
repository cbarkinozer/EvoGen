/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:05:51 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.acc.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.acc.dto.AccAccountSaveDto;
import com.cbarkinozer.onlinebankingrestapi.app.acc.enums.AccAccountType;
import com.cbarkinozer.onlinebankingrestapi.app.acc.enums.AccCurrencyType;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccAccountSaveDto_ESTest extends AccAccountSaveDto_ESTest_scaffolding {

    /**
     * Test setting and getting current balance with zero value.
     */
    @Test(timeout = 4000)
    public void testSetCurrentBalance_WithZeroValue_ShouldReturnSameValue() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        BigDecimal initialBalance = BigDecimal.valueOf(0L);
        accountSaveDto.setCurrentBalance(initialBalance);
        BigDecimal retrievedBalance = accountSaveDto.getCurrentBalance();
        assertSame(retrievedBalance, initialBalance);
    }

    /**
     * Test setting and getting current balance with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetCurrentBalance_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        BigDecimal initialBalance = BigDecimal.TEN;
        accountSaveDto.setCurrentBalance(initialBalance);
        BigDecimal retrievedBalance = accountSaveDto.getCurrentBalance();
        assertEquals((short) 10, retrievedBalance.shortValue());
    }

    /**
     * Test setting and getting current balance with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetCurrentBalance_WithNegativeValue_ShouldReturnSameValue() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        BigDecimal initialBalance = new BigDecimal(-2135);
        accountSaveDto.setCurrentBalance(initialBalance);
        BigDecimal retrievedBalance = accountSaveDto.getCurrentBalance();
        assertSame(retrievedBalance, initialBalance);
    }

    /**
     * Test setting and getting currency type.
     */
    @Test(timeout = 4000)
    public void testSetCurrencyType_WithValidEnum_ShouldReturnSameEnum() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        AccCurrencyType currencyType = AccCurrencyType.TL;
        accountSaveDto.setCurrencyType(currencyType);
        AccCurrencyType retrievedCurrencyType = accountSaveDto.getCurrencyType();
        assertEquals(AccCurrencyType.TL, retrievedCurrencyType);
    }

    /**
     * Test setting and getting account type.
     */
    @Test(timeout = 4000)
    public void testSetAccountType_WithValidEnum_ShouldReturnSameEnum() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        AccAccountType accountType = AccAccountType.DRAWING;
        accountSaveDto.setAccountType(accountType);
        AccAccountType retrievedAccountType = accountSaveDto.getAccountType();
        assertEquals(AccAccountType.DRAWING, retrievedAccountType);
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        boolean result = accountSaveDto.canEqual(accountSaveDto);
        assertTrue(result);
    }

    /**
     * Test canEqual method with a different object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObject_ShouldReturnFalse() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        Object differentObject = new Object();
        boolean result = accountSaveDto.canEqual(differentObject);
        assertFalse(result);
    }

    /**
     * Test getting currency type without setting it.
     */
    @Test(timeout = 4000)
    public void testGetCurrencyType_WithoutSetting_ShouldNotThrowException() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        accountSaveDto.getCurrencyType();
    }

    /**
     * Test getting account type without setting it.
     */
    @Test(timeout = 4000)
    public void testGetAccountType_WithoutSetting_ShouldNotThrowException() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        accountSaveDto.getAccountType();
    }

    /**
     * Test getting current balance without setting it.
     */
    @Test(timeout = 4000)
    public void testGetCurrentBalance_WithoutSetting_ShouldReturnNull() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        BigDecimal retrievedBalance = accountSaveDto.getCurrentBalance();
        assertNull(retrievedBalance);
    }

    /**
     * Test equals method with same account type.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameAccountType_ShouldReturnTrue() throws Throwable {
        AccAccountSaveDto accountSaveDto1 = new AccAccountSaveDto();
        AccAccountType accountType = AccAccountType.DRAWING;
        accountSaveDto1.setAccountType(accountType);
        AccAccountSaveDto accountSaveDto2 = new AccAccountSaveDto();
        accountSaveDto2.setAccountType(accountType);
        boolean result = accountSaveDto1.equals(accountSaveDto2);
        assertTrue(result);
    }

    /**
     * Test equals method with different account types.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentAccountTypes_ShouldReturnFalse() throws Throwable {
        AccAccountSaveDto accountSaveDto1 = new AccAccountSaveDto();
        AccAccountSaveDto accountSaveDto2 = new AccAccountSaveDto();
        AccAccountType accountType = AccAccountType.DRAWING;
        accountSaveDto2.setAccountType(accountType);
        boolean result = accountSaveDto1.equals(accountSaveDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with same currency type.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameCurrencyType_ShouldReturnTrue() throws Throwable {
        AccAccountSaveDto accountSaveDto1 = new AccAccountSaveDto();
        AccCurrencyType currencyType = AccCurrencyType.EURO;
        accountSaveDto1.setCurrencyType(currencyType);
        AccAccountSaveDto accountSaveDto2 = new AccAccountSaveDto();
        accountSaveDto2.setCurrencyType(currencyType);
        boolean result = accountSaveDto1.equals(accountSaveDto2);
        assertTrue(result);
    }

    /**
     * Test equals method with different currency types.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentCurrencyTypes_ShouldReturnFalse() throws Throwable {
        AccAccountSaveDto accountSaveDto1 = new AccAccountSaveDto();
        AccCurrencyType currencyType = AccCurrencyType.EURO;
        accountSaveDto1.setCurrencyType(currencyType);
        AccAccountSaveDto accountSaveDto2 = new AccAccountSaveDto();
        boolean result = accountSaveDto1.equals(accountSaveDto2);
        assertFalse(result);
    }

    /**
     * Test equals method with same current balance.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameCurrentBalance_ShouldReturnTrue() throws Throwable {
        AccAccountSaveDto accountSaveDto1 = new AccAccountSaveDto();
        BigDecimal initialBalance = BigDecimal.ZERO;
        accountSaveDto1.setCurrentBalance(initialBalance);
        AccAccountSaveDto accountSaveDto2 = new AccAccountSaveDto();
        accountSaveDto2.setCurrentBalance(initialBalance);
        boolean result = accountSaveDto1.equals(accountSaveDto2);
        assertTrue(result);
    }

    /**
     * Test equals method with different objects.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentObject_ShouldReturnFalse() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        Object differentObject = new Object();
        boolean result = accountSaveDto.equals(differentObject);
        assertFalse(result);
    }

    /**
     * Test equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        boolean result = accountSaveDto.equals(accountSaveDto);
        assertTrue(result);
    }

    /**
     * Test hashCode method without setting any fields.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithoutSettingFields_ShouldNotThrowException() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        accountSaveDto.hashCode();
    }

    /**
     * Test hashCode method with current balance set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithCurrentBalanceSet_ShouldNotThrowException() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        BigDecimal initialBalance = new BigDecimal(22);
        accountSaveDto.setCurrentBalance(initialBalance);
        accountSaveDto.hashCode();
    }

    /**
     * Test toString method without setting any fields.
     */
    @Test(timeout = 4000)
    public void testToString_WithoutSettingFields_ShouldReturnCorrectString() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        String result = accountSaveDto.toString();
        assertEquals("AccAccountSaveDto(currentBalance=null, currencyType=null, accountType=null)", result);
    }

    /**
     * Test hashCode method with currency type set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithCurrencyTypeSet_ShouldNotThrowException() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        AccCurrencyType currencyType = AccCurrencyType.EURO;
        accountSaveDto.setCurrencyType(currencyType);
        accountSaveDto.hashCode();
    }

    /**
     * Test hashCode method with account type set.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithAccountTypeSet_ShouldNotThrowException() throws Throwable {
        AccAccountSaveDto accountSaveDto = new AccAccountSaveDto();
        AccAccountType accountType = AccAccountType.DEPOSIT;
        accountSaveDto.setAccountType(accountType);
        accountSaveDto.hashCode();
    }
}