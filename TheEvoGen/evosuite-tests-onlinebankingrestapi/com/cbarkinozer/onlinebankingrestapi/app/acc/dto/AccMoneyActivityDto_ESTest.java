/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:07:03 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.acc.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.acc.dto.AccMoneyActivityDto;
import com.cbarkinozer.onlinebankingrestapi.app.acc.enums.AccAccountActivityType;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccMoneyActivityDto_ESTest extends AccMoneyActivityDto_ESTest_scaffolding {

    /**
     * Tests setting and getting amount using builder.
     */
    @Test(timeout = 4000)
    public void testSetAmount_WithBuilder_ShouldReturnCorrectAmount() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto = builder.build();
        BigDecimal amount = new BigDecimal(0);
        activityDto.setAmount(amount);
        BigDecimal retrievedAmount = activityDto.getAmount();
        assertSame(retrievedAmount, amount);
    }

    /**
     * Tests getting amount from a fully constructed AccMoneyActivityDto object.
     */
    @Test(timeout = 4000)
    public void testGetAmount_WithFullyConstructedObject_ShouldReturnCorrectAmount() throws Throwable {
        Long accountId = new Long(-1L);
        BigDecimal amount = new BigDecimal(-1212.425135826187);
        AccAccountActivityType activityType = AccAccountActivityType.GET;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto(accountId, amount, activityType);
        BigDecimal retrievedAmount = activityDto.getAmount();
        assertEquals((byte) 68, retrievedAmount.byteValue());
    }

    /**
     * Tests setting and getting amount directly.
     */
    @Test(timeout = 4000)
    public void testGetAmount_WithDirectConstruction_ShouldReturnCorrectAmount() throws Throwable {
        Long accountId = new Long(763L);
        BigDecimal amount = new BigDecimal(763L);
        AccAccountActivityType activityType = AccAccountActivityType.SEND;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto(accountId, amount, activityType);
        BigDecimal retrievedAmount = activityDto.getAmount();
        assertSame(retrievedAmount, amount);
    }

    /**
     * Tests getting activity type from a default constructed object.
     */
    @Test(timeout = 4000)
    public void testGetActivityType_WithDefaultConstruction_ShouldNotThrow() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto = builder.build();
        activityDto.getActivityType();
    }

    /**
     * Tests setting and getting account id.
     */
    @Test(timeout = 4000)
    public void testSetAccountId_WithBuilder_ShouldReturnCorrectAccountId() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto = builder.build();
        Long accountId = new Long(0L);
        activityDto.setAccountId(accountId);
        Long retrievedAccountId = activityDto.getAccountId();
        assertEquals(0L, (long) retrievedAccountId);
    }

    /**
     * Tests getting account id from a fully constructed object.
     */
    @Test(timeout = 4000)
    public void testGetAccountId_WithFullyConstructedObject_ShouldReturnCorrectAccountId() throws Throwable {
        Long accountId = new Long(763L);
        BigDecimal amount = new BigDecimal(763L);
        AccAccountActivityType activityType = AccAccountActivityType.SEND;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto(accountId, amount, activityType);
        Long retrievedAccountId = activityDto.getAccountId();
        assertEquals(763L, (long) retrievedAccountId);
    }

    /**
     * Tests getting account id with a negative value.
     */
    @Test(timeout = 4000)
    public void testGetAccountId_WithNegativeAccountId_ShouldReturnCorrectAccountId() throws Throwable {
        Long accountId = new Long(-708L);
        BigDecimal amount = new BigDecimal(415L);
        AccAccountActivityType activityType = AccAccountActivityType.DEPOSIT;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto(accountId, amount, activityType);
        Long retrievedAccountId = activityDto.getAccountId();
        assertEquals(-708L, (long) retrievedAccountId);
    }

    /**
     * Tests canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        BigDecimal amount = BigDecimal.TEN;
        AccAccountActivityType activityType = AccAccountActivityType.SEND;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto((Long) null, amount, activityType);
        boolean result = activityDto.canEqual(activityDto);
        assertTrue(result);
    }

    /**
     * Tests canEqual method with a different object type.
     */
    @Test(timeout = 4000)
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccMoneyActivityDto activityDto = builder.build();
        boolean result = activityDto.canEqual(builder);
        assertFalse(result);
    }

    /**
     * Tests getting amount from a default constructed object.
     */
    @Test(timeout = 4000)
    public void testGetAmount_WithDefaultConstruction_ShouldReturnNull() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccMoneyActivityDto activityDto = builder.build();
        BigDecimal amount = activityDto.getAmount();
        assertNull(amount);
    }

    /**
     * Tests getting activity type from a fully constructed object.
     */
    @Test(timeout = 4000)
    public void testGetActivityType_WithFullyConstructedObject_ShouldReturnCorrectActivityType() throws Throwable {
        Long accountId = new Long(1506L);
        BigDecimal amount = BigDecimal.ZERO;
        AccAccountActivityType activityType = AccAccountActivityType.WITHDRAW;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto(accountId, amount, activityType);
        AccAccountActivityType retrievedActivityType = activityDto.getActivityType();
        assertSame(retrievedActivityType, activityType);
    }

    /**
     * Tests getting account id from an object with null account id.
     */
    @Test(timeout = 4000)
    public void testGetAccountId_WithNullAccountId_ShouldReturnNull() throws Throwable {
        BigDecimal amount = BigDecimal.TEN;
        AccAccountActivityType activityType = AccAccountActivityType.SEND;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto((Long) null, amount, activityType);
        Long accountId = activityDto.getAccountId();
        assertNull(accountId);
    }

    /**
     * Tests equals method with different activity types.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentActivityTypes_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccAccountActivityType activityType = AccAccountActivityType.WITHDRAW;
        builder.activityType(activityType);
        AccMoneyActivityDto activityDto1 = builder.build();
        Long accountId = new Long(0L);
        activityDto1.setAccountId(accountId);
        AccAccountActivityType differentActivityType = AccAccountActivityType.DEPOSIT;
        AccMoneyActivityDto activityDto2 = new AccMoneyActivityDto(accountId, (BigDecimal) null, differentActivityType);
        boolean result = activityDto1.equals(activityDto2);
        assertFalse(result);
    }

    /**
     * Tests equals method with the same activity type but different objects.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameActivityType_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccAccountActivityType activityType = AccAccountActivityType.WITHDRAW;
        builder.activityType(activityType);
        AccMoneyActivityDto activityDto1 = builder.build();
        Long accountId = new Long(0L);
        activityDto1.setAccountId(accountId);
        AccMoneyActivityDto activityDto2 = new AccMoneyActivityDto(accountId, (BigDecimal) null, activityType);
        boolean result = activityDto1.equals(activityDto2);
        assertTrue(result);
    }

    /**
     * Tests equals method with different amounts.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentAmounts_ShouldReturnFalse() throws Throwable {
        BigDecimal amount = BigDecimal.TEN;
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccMoneyActivityDto activityDto1 = builder.build();
        builder.amount(amount);
        AccMoneyActivityDto activityDto2 = builder.build();
        boolean result = activityDto1.equals(activityDto2);
        assertFalse(activityDto2.equals(activityDto1));
        assertFalse(result);
    }

    /**
     * Tests equals method with objects having different properties set.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentProperties_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto1 = builder.build();
        BigDecimal amount = BigDecimal.ONE;
        builder.amount(amount);
        AccMoneyActivityDto activityDto2 = builder.build();
        boolean result = activityDto2.equals(activityDto1);
        assertFalse(result);
    }

    /**
     * Tests equals method with different objects of the same class.
     */
    @Test(timeout = 4000)
    public void testEquals_WithDifferentObjects_ShouldReturnFalse() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccAccountActivityType activityType = AccAccountActivityType.WITHDRAW;
        AccMoneyActivityDto activityDto1 = builder.build();
        Long accountId = new Long(0L);
        activityDto1.setAccountId(accountId);
        AccMoneyActivityDto activityDto2 = new AccMoneyActivityDto(accountId, (BigDecimal) null, activityType);
        boolean result = activityDto1.equals(activityDto2);
        assertFalse(result);
        assertFalse(activityDto2.equals(activityDto1));
    }

    /**
     * Tests equals method with the same object.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto = builder.build();
        boolean result = activityDto.equals(activityDto);
        assertTrue(result);
    }

    /**
     * Tests hashCode method without throwing an exception.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithDefaultConstruction_ShouldNotThrow() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto = builder.build();
        activityDto.hashCode();
    }

    /**
     * Tests hashCode method with a fully constructed object.
     */
    @Test(timeout = 4000)
    public void testHashCode_WithFullyConstructedObject_ShouldNotThrow() throws Throwable {
        BigDecimal amount = BigDecimal.TEN;
        Long accountId = new Long(-1397L);
        AccAccountActivityType activityType = AccAccountActivityType.WITHDRAW;
        AccMoneyActivityDto activityDto = new AccMoneyActivityDto(accountId, amount, activityType);
        activityDto.hashCode();
    }

    /**
     * Tests chaining of accountId method in the builder.
     */
    @Test(timeout = 4000)
    public void testAccountIdBuilderChaining_ShouldReturnSameBuilder() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        Long accountId = Long.valueOf(1278L);
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder chainedBuilder = builder.accountId(accountId);
        assertSame(builder, chainedBuilder);
    }

    /**
     * Tests toString method of the builder.
     */
    @Test(timeout = 4000)
    public void testToStringBuilder_ShouldReturnCorrectString() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        String result = builder.toString();
        assertEquals("AccMoneyActivityDto.AccMoneyActivityDtoBuilder(accountId=null, amount=null, activityType=null)", result);
    }

    /**
     * Tests equals method with the same properties set on different objects.
     */
    @Test(timeout = 4000)
    public void testEquals_WithSameProperties_ShouldReturnTrue() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        BigDecimal amount = BigDecimal.TEN;
        builder.amount(amount);
        AccMoneyActivityDto activityDto1 = builder.build();
        AccMoneyActivityDto activityDto2 = builder.build();
        boolean result = activityDto1.equals(activityDto2);
        assertTrue(result);
    }

    /**
     * Tests toString method of AccMoneyActivityDto.
     */
    @Test(timeout = 4000)
    public void testToStringAccMoneyActivityDto_ShouldReturnCorrectString() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = AccMoneyActivityDto.builder();
        AccMoneyActivityDto activityDto = builder.build();
        String result = activityDto.toString();
        assertEquals("AccMoneyActivityDto(accountId=null, amount=null, activityType=null)", result);
    }

    /**
     * Tests setting activity type directly.
     */
    @Test(timeout = 4000)
    public void testSetActivityType_Directly_ShouldReturnCorrectActivityType() throws Throwable {
        AccMoneyActivityDto.AccMoneyActivityDtoBuilder builder = new AccMoneyActivityDto.AccMoneyActivityDtoBuilder();
        AccMoneyActivityDto activityDto = builder.build();
        AccAccountActivityType activityType = AccAccountActivityType.SEND;
        activityDto.setActivityType(activityType);
        assertEquals(AccAccountActivityType.SEND, activityDto.getActivityType());
    }
}