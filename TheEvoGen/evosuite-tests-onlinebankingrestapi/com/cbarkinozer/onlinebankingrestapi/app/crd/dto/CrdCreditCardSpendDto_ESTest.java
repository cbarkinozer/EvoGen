/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:13:12 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.crd.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigDecimal;
import java.time.Clock;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CrdCreditCardSpendDto_ESTest extends CrdCreditCardSpendDto_ESTest_scaffolding {

    /**
     * Test setting and getting expire date.
     */
    @Test(timeout = 4000)
    public void testSetExpireDate_GetExpireDate_ShouldReturnSameDate() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Clock clock = MockClock.systemDefaultZone();
        LocalDate currentDate = MockLocalDate.now(clock);
        creditCardSpendDto.setExpireDate(currentDate);
        LocalDate retrievedDate = creditCardSpendDto.getExpireDate();
        assertSame(retrievedDate, currentDate);
    }

    /**
     * Test setting and getting description with a specific value.
     */
    @Test(timeout = 4000)
    public void testSetDescription_GetDescription_ShouldReturnSameDescription() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        String description = "CrdCreditCardSpendDto(cardNo=-1894, cvvNo=null, expireDate=null, amount=null, description=null)";
        creditCardSpendDto.setDescription(description);
        String retrievedDescription = creditCardSpendDto.getDescription();
        assertEquals(description, retrievedDescription);
    }

    /**
     * Test setting and getting an empty description.
     */
    @Test(timeout = 4000)
    public void testSetEmptyDescription_GetDescription_ShouldReturnEmpty() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        creditCardSpendDto.setDescription("");
        String retrievedDescription = creditCardSpendDto.getDescription();
        assertEquals("", retrievedDescription);
    }

    /**
     * Test setting and getting CVV number with zero value.
     */
    @Test(timeout = 4000)
    public void testSetCvvNoZero_GetCvvNo_ShouldReturnZero() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cvvNo = 0L;
        creditCardSpendDto.setCvvNo(cvvNo);
        Long retrievedCvvNo = creditCardSpendDto.getCvvNo();
        assertEquals((long) cvvNo, (long) retrievedCvvNo);
    }

    /**
     * Test setting and getting CVV number with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetCvvNoPositive_GetCvvNo_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cvvNo = 893L;
        creditCardSpendDto.setCvvNo(cvvNo);
        Long retrievedCvvNo = creditCardSpendDto.getCvvNo();
        assertEquals((long) cvvNo, (long) retrievedCvvNo);
    }

    /**
     * Test setting and getting CVV number with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetCvvNoNegative_GetCvvNo_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cvvNo = -2994L;
        creditCardSpendDto.setCvvNo(cvvNo);
        Long retrievedCvvNo = creditCardSpendDto.getCvvNo();
        assertEquals((long) cvvNo, (long) retrievedCvvNo);
    }

    /**
     * Test setting and getting card number with zero value.
     */
    @Test(timeout = 4000)
    public void testSetCardNoZero_GetCardNo_ShouldReturnZero() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cardNo = 0L;
        creditCardSpendDto.setCardNo(cardNo);
        Long retrievedCardNo = creditCardSpendDto.getCardNo();
        assertEquals((long) cardNo, (long) retrievedCardNo);
    }

    /**
     * Test setting and getting card number with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetCardNoPositive_GetCardNo_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cardNo = 466L;
        creditCardSpendDto.setCardNo(cardNo);
        Long retrievedCardNo = creditCardSpendDto.getCardNo();
        assertEquals((long) cardNo, (long) retrievedCardNo);
    }

    /**
     * Test setting and getting card number with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetCardNoNegative_GetCardNo_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cardNo = -1894L;
        creditCardSpendDto.setCardNo(cardNo);
        Long retrievedCardNo = creditCardSpendDto.getCardNo();
        assertEquals((long) cardNo, (long) retrievedCardNo);
    }

    /**
     * Test setting and getting amount with a positive value.
     */
    @Test(timeout = 4000)
    public void testSetAmountPositive_GetAmount_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        BigDecimal amount = BigDecimal.TEN;
        creditCardSpendDto.setAmount(amount);
        BigDecimal retrievedAmount = creditCardSpendDto.getAmount();
        assertEquals((byte) 10, retrievedAmount.byteValue());
    }

    /**
     * Test setting and getting amount with zero value.
     */
    @Test(timeout = 4000)
    public void testSetAmountZero_GetAmount_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        BigDecimal amount = BigDecimal.ZERO;
        creditCardSpendDto.setAmount(amount);
        BigDecimal retrievedAmount = creditCardSpendDto.getAmount();
        assertSame(retrievedAmount, amount);
    }

    /**
     * Test setting and getting amount with a negative value.
     */
    @Test(timeout = 4000)
    public void testSetAmountNegative_GetAmount_ShouldReturnSame() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        BigDecimal amount = new BigDecimal(-906);
        creditCardSpendDto.setAmount(amount);
        BigDecimal retrievedAmount = creditCardSpendDto.getAmount();
        assertEquals((byte) 118, retrievedAmount.byteValue());
    }

    /**
     * Test canEqual method with the same object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_SameObject_ShouldReturnTrue() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        boolean result = creditCardSpendDto.canEqual(creditCardSpendDto);
        assertTrue(result);
    }

    /**
     * Test canEqual method with a different object.
     */
    @Test(timeout = 4000)
    public void testCanEqual_DifferentObject_ShouldReturnFalse() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Object obj = new Object();
        boolean result = creditCardSpendDto.canEqual(obj);
        assertFalse(result);
    }

    /**
     * Test getting amount when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetAmountNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        BigDecimal amount = creditCardSpendDto.getAmount();
        assertNull(amount);
    }

    /**
     * Test getting expire date when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetExpireDateNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        LocalDate expireDate = creditCardSpendDto.getExpireDate();
        assertNull(expireDate);
    }

    /**
     * Test getting CVV number when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetCvvNoNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cvvNo = creditCardSpendDto.getCvvNo();
        assertNull(cvvNo);
    }

    /**
     * Test getting card number when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetCardNoNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        Long cardNo = creditCardSpendDto.getCardNo();
        assertNull(cardNo);
    }

    /**
     * Test getting description when it is not set.
     */
    @Test(timeout = 4000)
    public void testGetDescriptionNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        String description = creditCardSpendDto.getDescription();
        assertNull(description);
    }

    // Additional tests for equals, hashCode, and toString methods
    /**
     * Test equals method with the same description.
     */
    @Test(timeout = 4000)
    public void testEquals_SameDescription_ShouldReturnTrue() throws Throwable {
        CrdCreditCardSpendDto dto1 = new CrdCreditCardSpendDto();
        dto1.setDescription("Test Description");
        CrdCreditCardSpendDto dto2 = new CrdCreditCardSpendDto();
        dto2.setDescription("Test Description");
        boolean result = dto1.equals(dto2);
        assertTrue(result);
    }

    /**
     * Test equals method with different descriptions.
     */
    @Test(timeout = 4000)
    public void testEquals_DifferentDescription_ShouldReturnFalse() throws Throwable {
        CrdCreditCardSpendDto dto1 = new CrdCreditCardSpendDto();
        dto1.setDescription("Test Description 1");
        CrdCreditCardSpendDto dto2 = new CrdCreditCardSpendDto();
        dto2.setDescription("Test Description 2");
        boolean result = dto1.equals(dto2);
        assertFalse(result);
    }

    /**
     * Test hashCode method.
     */
    @Test(timeout = 4000)
    public void testHashCode_ShouldNotThrowException() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        creditCardSpendDto.hashCode();
    }

    /**
     * Test toString method.
     */
    @Test(timeout = 4000)
    public void testToString_ShouldReturnExpectedString() throws Throwable {
        CrdCreditCardSpendDto creditCardSpendDto = new CrdCreditCardSpendDto();
        String result = creditCardSpendDto.toString();
        assertNotNull(result);
    }
}