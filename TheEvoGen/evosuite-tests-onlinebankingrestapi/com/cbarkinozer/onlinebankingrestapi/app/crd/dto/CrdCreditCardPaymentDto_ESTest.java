/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:12:07 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.crd.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.crd.dto.CrdCreditCardPaymentDto;
import java.math.BigDecimal;
import java.math.MathContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CrdCreditCardPaymentDto_ESTest extends CrdCreditCardPaymentDto_ESTest_scaffolding {

    @Test(timeout = 4000)
    /**
     * Test setting and getting crdCreditCardId with zero value.
     */
    public void testSetCrdCreditCardId_WithZeroValue_ShouldReturnCorrectId() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        Long creditCardId = 0L;
        paymentDto.setCrdCreditCardId(creditCardId);
        Long retrievedId = paymentDto.getCrdCreditCardId();
        assertEquals(0L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting crdCreditCardId with positive value.
     */
    public void testSetCrdCreditCardId_WithPositiveValue_ShouldReturnCorrectId() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        Long creditCardId = 1L;
        paymentDto.setCrdCreditCardId(creditCardId);
        Long retrievedId = paymentDto.getCrdCreditCardId();
        assertEquals(1L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting crdCreditCardId with negative value.
     */
    public void testSetCrdCreditCardId_WithNegativeValue_ShouldReturnCorrectId() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        Long creditCardId = -1522L;
        paymentDto.setCrdCreditCardId(creditCardId);
        Long retrievedId = paymentDto.getCrdCreditCardId();
        assertEquals(-1522L, (long) retrievedId);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount with negative decimal value.
     */
    public void testSetAmount_WithNegativeDecimalValue_ShouldReturnCorrectAmount() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = BigDecimal.valueOf(-3761.129);
        paymentDto.setAmount(amount);
        BigDecimal retrievedAmount = paymentDto.getAmount();
        assertEquals((short) (-3761), retrievedAmount.shortValue());
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount with zero value.
     */
    public void testSetAmount_WithZeroValue_ShouldReturnCorrectAmount() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = BigDecimal.ZERO;
        paymentDto.setAmount(amount);
        BigDecimal retrievedAmount = paymentDto.getAmount();
        assertSame(retrievedAmount, amount);
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount with positive decimal value.
     */
    public void testSetAmount_WithPositiveDecimalValue_ShouldReturnCorrectAmount() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = new BigDecimal(1.0);
        paymentDto.setAmount(amount);
        BigDecimal retrievedAmount = paymentDto.getAmount();
        assertEquals((byte) 1, retrievedAmount.byteValue());
    }

    @Test(timeout = 4000)
    /**
     * Test setting and getting amount with large decimal value.
     */
    public void testSetAmount_WithLargeDecimalValue_ShouldReturnCorrectAmount() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        MathContext mathContext = MathContext.DECIMAL128;
        BigDecimal amount = new BigDecimal(2451L, mathContext);
        paymentDto.setAmount(amount);
        BigDecimal retrievedAmount = paymentDto.getAmount();
        assertEquals((byte) (-109), retrievedAmount.byteValue());
    }

    @Test(timeout = 4000)
    /**
     * Test canEqual method with same object.
     */
    public void testCanEqual_WithSameObject_ShouldReturnTrue() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        boolean result = paymentDto.canEqual(paymentDto);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    /**
     * Test canEqual method with different object type.
     */
    public void testCanEqual_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = new BigDecimal(1.0);
        boolean result = paymentDto.canEqual(amount);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    /**
     * Test getting crdCreditCardId when not set.
     */
    public void testGetCrdCreditCardId_WhenNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        Long creditCardId = paymentDto.getCrdCreditCardId();
        assertNull(creditCardId);
    }

    @Test(timeout = 4000)
    /**
     * Test getting amount when not set.
     */
    public void testGetAmount_WhenNotSet_ShouldReturnNull() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = paymentDto.getAmount();
        assertNull(amount);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with same amount.
     */
    public void testEquals_WithSameAmount_ShouldReturnTrue() throws Throwable {
        CrdCreditCardPaymentDto paymentDto1 = new CrdCreditCardPaymentDto();
        BigDecimal amount = new BigDecimal(-2195L);
        paymentDto1.setAmount(amount);
        CrdCreditCardPaymentDto paymentDto2 = new CrdCreditCardPaymentDto();
        paymentDto2.setAmount(amount);
        boolean result = paymentDto1.equals(paymentDto2);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with different amount.
     */
    public void testEquals_WithDifferentAmount_ShouldReturnFalse() throws Throwable {
        CrdCreditCardPaymentDto paymentDto1 = new CrdCreditCardPaymentDto();
        CrdCreditCardPaymentDto paymentDto2 = new CrdCreditCardPaymentDto();
        BigDecimal amount = BigDecimal.ZERO;
        paymentDto2.setAmount(amount);
        boolean result = paymentDto1.equals(paymentDto2);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with same crdCreditCardId.
     */
    public void testEquals_WithSameCrdCreditCardId_ShouldReturnTrue() throws Throwable {
        CrdCreditCardPaymentDto paymentDto1 = new CrdCreditCardPaymentDto();
        Long creditCardId = 0L;
        paymentDto1.setCrdCreditCardId(creditCardId);
        CrdCreditCardPaymentDto paymentDto2 = new CrdCreditCardPaymentDto();
        paymentDto2.setCrdCreditCardId(creditCardId);
        boolean result = paymentDto1.equals(paymentDto2);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with different crdCreditCardId.
     */
    public void testEquals_WithDifferentCrdCreditCardId_ShouldReturnFalse() throws Throwable {
        CrdCreditCardPaymentDto paymentDto1 = new CrdCreditCardPaymentDto();
        CrdCreditCardPaymentDto paymentDto2 = new CrdCreditCardPaymentDto();
        Long creditCardId = 1L;
        paymentDto1.setCrdCreditCardId(creditCardId);
        boolean result = paymentDto2.equals(paymentDto1);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with different crdCreditCardId on second object.
     */
    public void testEquals_WithDifferentCrdCreditCardIdOnSecondObject_ShouldReturnFalse() throws Throwable {
        CrdCreditCardPaymentDto paymentDto1 = new CrdCreditCardPaymentDto();
        CrdCreditCardPaymentDto paymentDto2 = new CrdCreditCardPaymentDto();
        Long creditCardId = 1L;
        paymentDto2.setCrdCreditCardId(creditCardId);
        boolean result = paymentDto2.equals(paymentDto1);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with different object type.
     */
    public void testEquals_WithDifferentObjectType_ShouldReturnFalse() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = new BigDecimal(-2195L);
        boolean result = paymentDto.equals(amount);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with same object.
     */
    public void testEquals_WithSameObject_ShouldReturnTrue() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        boolean result = paymentDto.equals(paymentDto);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    /**
     * Test hashCode method with amount set.
     */
    public void testHashCode_WithAmountSet_ShouldNotThrowException() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        BigDecimal amount = new BigDecimal(1.0);
        paymentDto.setAmount(amount);
        paymentDto.hashCode();
    }

    @Test(timeout = 4000)
    /**
     * Test hashCode method without amount set.
     */
    public void testHashCode_WithoutAmountSet_ShouldNotThrowException() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        paymentDto.hashCode();
    }

    @Test(timeout = 4000)
    /**
     * Test toString method without any fields set.
     */
    public void testToString_WithoutAnyFieldsSet_ShouldReturnCorrectString() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        String result = paymentDto.toString();
        assertEquals("CrdCreditCardPaymentDto(crdCreditCardId=null, amount=null)", result);
    }

    @Test(timeout = 4000)
    /**
     * Test equals method with different amount.
     */
    public void testEquals_WithDifferentAmount_ShouldReturnFalse2() throws Throwable {
        CrdCreditCardPaymentDto paymentDto1 = new CrdCreditCardPaymentDto();
        BigDecimal amount = new BigDecimal(-2195L);
        paymentDto1.setAmount(amount);
        CrdCreditCardPaymentDto paymentDto2 = new CrdCreditCardPaymentDto();
        boolean result = paymentDto1.equals(paymentDto2);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    /**
     * Test hashCode method with crdCreditCardId set.
     */
    public void testHashCode_WithCrdCreditCardIdSet_ShouldNotThrowException() throws Throwable {
        CrdCreditCardPaymentDto paymentDto = new CrdCreditCardPaymentDto();
        Long creditCardId = 1L;
        paymentDto.setCrdCreditCardId(creditCardId);
        paymentDto.hashCode();
    }
}