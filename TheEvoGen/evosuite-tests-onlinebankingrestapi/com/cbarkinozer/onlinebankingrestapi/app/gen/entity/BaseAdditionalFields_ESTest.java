/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:15:51 GMT 2025
 */

package com.cbarkinozer.onlinebankingrestapi.app.gen.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cbarkinozer.onlinebankingrestapi.app.gen.entity.BaseAdditionalFields;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseAdditionalFields_ESTest extends BaseAdditionalFields_ESTest_scaffolding {

    /**
     * Test setting and getting updatedBy with zero value.
     */
    @Test(timeout = 4000)
    public void testSetUpdatedBy_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long updatedBy = 0L;
        baseAdditionalFields.setUpdatedBy(updatedBy);
        Long result = baseAdditionalFields.getUpdatedBy();
        assertEquals(0L, (long) result);
    }

    /**
     * Test setting and getting updatedBy with positive value.
     */
    @Test(timeout = 4000)
    public void testSetUpdatedBy_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long updatedBy = 2658L;
        baseAdditionalFields.setUpdatedBy(updatedBy);
        Long result = baseAdditionalFields.getUpdatedBy();
        assertEquals(2658L, (long) result);
    }

    /**
     * Test setting and getting updatedBy with negative value.
     */
    @Test(timeout = 4000)
    public void testSetUpdatedBy_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long updatedBy = -655L;
        baseAdditionalFields.setUpdatedBy(updatedBy);
        Long result = baseAdditionalFields.getUpdatedBy();
        assertEquals(-655L, (long) result);
    }

    /**
     * Test setting and getting updateDate.
     */
    @Test(timeout = 4000)
    public void testSetUpdateDate_WithMockDate_ShouldReturnCorrectDate() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        MockDate updateDate = new MockDate(0, -1, -1267, -3068, -1267);
        baseAdditionalFields.setUpdateDate(updateDate);
        Date result = baseAdditionalFields.getUpdateDate();
        assertEquals("Mon Feb 03 06:53:00 GMT 1896", result.toString());
    }

    /**
     * Test setting and getting createdBy with zero value.
     */
    @Test(timeout = 4000)
    public void testSetCreatedBy_WithZeroValue_ShouldReturnCorrectValue() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long createdBy = 0L;
        baseAdditionalFields.setCreatedBy(createdBy);
        Long result = baseAdditionalFields.getCreatedBy();
        assertEquals(0L, (long) result);
    }

    /**
     * Test setting and getting createdBy with positive value.
     */
    @Test(timeout = 4000)
    public void testSetCreatedBy_WithPositiveValue_ShouldReturnCorrectValue() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long createdBy = 1677L;
        baseAdditionalFields.setCreatedBy(createdBy);
        Long result = baseAdditionalFields.getCreatedBy();
        assertEquals(1677L, (long) result);
    }

    /**
     * Test setting and getting createdBy with negative value.
     */
    @Test(timeout = 4000)
    public void testSetCreatedBy_WithNegativeValue_ShouldReturnCorrectValue() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long createdBy = -3161L;
        baseAdditionalFields.setCreatedBy(createdBy);
        Long result = baseAdditionalFields.getCreatedBy();
        assertEquals(-3161L, (long) result);
    }

    /**
     * Test setting and getting createDate.
     */
    @Test(timeout = 4000)
    public void testSetCreateDate_WithMockDate_ShouldReturnCorrectDate() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        MockDate createDate = new MockDate(0, -1, -1267, -3068, -1267);
        baseAdditionalFields.setCreateDate(createDate);
        Date result = baseAdditionalFields.getCreateDate();
        assertEquals("Mon Feb 03 06:53:00 GMT 1896", result.toString());
    }

    /**
     * Test getting updatedBy when not set.
     */
    @Test(timeout = 4000)
    public void testGetUpdatedBy_WhenNotSet_ShouldReturnNull() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long result = baseAdditionalFields.getUpdatedBy();
        assertNull(result);
    }

    /**
     * Test getting updateDate when not set.
     */
    @Test(timeout = 4000)
    public void testGetUpdateDate_WhenNotSet_ShouldReturnNull() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Date result = baseAdditionalFields.getUpdateDate();
        assertNull(result);
    }

    /**
     * Test getting createDate when not set.
     */
    @Test(timeout = 4000)
    public void testGetCreateDate_WhenNotSet_ShouldReturnNull() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Date result = baseAdditionalFields.getCreateDate();
        assertNull(result);
    }

    /**
     * Test getting createdBy when not set.
     */
    @Test(timeout = 4000)
    public void testGetCreatedBy_WhenNotSet_ShouldReturnNull() throws Throwable {
        BaseAdditionalFields baseAdditionalFields = new BaseAdditionalFields();
        Long result = baseAdditionalFields.getCreatedBy();
        assertNull(result);
    }
}