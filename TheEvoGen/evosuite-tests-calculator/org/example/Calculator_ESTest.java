/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 20:17:33 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Calculator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

    /**
     * Test the subtract method with zero operands.
     * Verifies that subtracting zero from zero returns zero.
     */
    @Test(timeout = 4000)
    public void testSubtract_WithZeroOperands_ShouldReturnZero() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(0, 0);
        assertEquals(0, result);
    }

    /**
     * Test the subtract method with positive operands.
     * Verifies that subtracting a positive number from another positive number returns the correct result.
     */
    @Test(timeout = 4000)
    public void testSubtract_WithPositiveNumbers_ShouldReturnCorrectDifference() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(754, 377);
        assertEquals(377, result);
    }

    /**
     * Test the divide method with equal operands.
     * Verifies that dividing a number by itself returns one.
     */
    @Test(timeout = 4000)
    public void testDivide_WithEqualOperands_ShouldReturnOne() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.divide(377, 377);
        assertEquals(1, result);
    }

    /**
     * Test the divide method with negative divisor.
     * Verifies that dividing a positive number by a negative number returns the correct negative result.
     */
    @Test(timeout = 4000)
    public void testDivide_WithNegativeDivisor_ShouldReturnNegativeResult() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.divide(1, -1);
        assertEquals(-1, result);
    }

    /**
     * Test the add method with zero operands.
     * Verifies that adding zero to zero returns zero.
     */
    @Test(timeout = 4000)
    public void testAdd_WithZeroOperands_ShouldReturnZero() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.add(0, 0);
        assertEquals(0, result);
    }

    /**
     * Test the add method with positive operands.
     * Verifies that adding two positive numbers returns their sum.
     */
    @Test(timeout = 4000)
    public void testAdd_WithPositiveNumbers_ShouldReturnCorrectSum() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.add(377, 377);
        assertEquals(754, result);
    }

    /**
     * Test the divide method with a zero divisor.
     * Verifies that dividing by zero throws an IllegalArgumentException.
     */
    @Test(timeout = 4000)
    public void testDivide_ByZero_ShouldThrowIllegalArgumentException() throws Throwable {
        Calculator calculator = new Calculator();
        try {
            calculator.divide(-2243, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            verifyException("org.example.Calculator", e);
        }
    }

    /**
     * Test the divide method with a larger dividend than divisor.
     * Verifies that the division result is correct when the dividend is less than the divisor.
     */
    @Test(timeout = 4000)
    public void testDivide_WithSmallerDividend_ShouldReturnZero() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.divide(1417, 2680);
        assertEquals(0, result);
    }

    /**
     * Test the subtract method with negative operands.
     * Verifies that subtracting a positive number from a negative number returns the correct negative result.
     */
    @Test(timeout = 4000)
    public void testSubtract_WithNegativeMinuend_ShouldReturnCorrectDifference() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(-1340, 557);
        assertEquals(-1897, result);
    }

    /**
     * Test the add method with a negative number and zero.
     * Verifies that adding zero to a negative number returns the same negative number.
     */
    @Test(timeout = 4000)
    public void testAdd_WithNegativeNumberAndZero_ShouldReturnSameNegativeNumber() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.add(-1897, 0);
        assertEquals(-1897, result);
    }
}