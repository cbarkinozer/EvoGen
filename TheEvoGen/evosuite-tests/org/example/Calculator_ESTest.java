/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 21:49:10 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Calculator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

    /**
     * Test subtracting zero from zero.
     */
    @Test(timeout = 4000)
    public void testSubtract_WithZeroNumbers_ShouldReturnZero() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(0, 0);
        assertEquals(0, result);
    }

    /**
     * Test subtracting a positive number from zero.
     */
    @Test(timeout = 4000)
    public void testSubtract_WithZeroAndPositiveNumber_ShouldReturnNegative() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(0, 1638);
        assertEquals((-1638), result);
    }

    /**
     * Test dividing a small number by a larger number.
     */
    @Test(timeout = 4000)
    public void testDivide_WithSmallNumeratorAndLargeDenominator_ShouldReturnZero() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.divide(1, 1662);
        assertEquals(0, result);
    }

    /**
     * Test dividing a positive number by a negative number.
     */
    @Test(timeout = 4000)
    public void testDivide_WithPositiveNumeratorAndNegativeDenominator_ShouldReturnNegativeQuotient() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.divide(1662, (-123));
        assertEquals((-13), result);
    }

    /**
     * Test adding zero to zero.
     */
    @Test(timeout = 4000)
    public void testAdd_WithZeroNumbers_ShouldReturnZero() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.add(0, 0);
        assertEquals(0, result);
    }

    /**
     * Test adding a negative number to a positive number.
     */
    @Test(timeout = 4000)
    public void testAdd_WithNegativeAndPositiveNumbers_ShouldReturnCorrectSum() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.add((-123), 131);
        assertEquals(8, result);
    }

    /**
     * Test dividing by zero, expecting an IllegalArgumentException.
     */
    @Test(timeout = 4000)
    public void testDivide_ByZero_ShouldThrowIllegalArgumentException() throws Throwable {
        Calculator calculator = new Calculator();
        try {
            calculator.divide(0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            verifyException("org.example.Calculator", e);
        }
    }

    /**
     * Test dividing a number by itself.
     */
    @Test(timeout = 4000)
    public void testDivide_WithSameNumeratorAndDenominator_ShouldReturnOne() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.divide(3192, 3192);
        assertEquals(1, result);
    }

    /**
     * Test subtracting a negative number from a positive number.
     */
    @Test(timeout = 4000)
    public void testSubtract_WithPositiveAndNegativeNumbers_ShouldReturnCorrectDifference() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(3161, (-1898));
        assertEquals(5059, result);
    }

    /**
     * Test adding two negative numbers.
     */
    @Test(timeout = 4000)
    public void testAdd_WithTwoNegativeNumbers_ShouldReturnCorrectSum() throws Throwable {
        Calculator calculator = new Calculator();
        int result = calculator.add((-2336), (-2336));
        assertEquals((-4672), result);
    }
}